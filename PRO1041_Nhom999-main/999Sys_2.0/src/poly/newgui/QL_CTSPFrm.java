/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package poly.newgui;

import java.awt.CardLayout;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import poly.dao.ChatLieuDao;
import poly.dao.DanhMucDao;
import poly.dao.DonViTinhDao;
import poly.dao.MaMauDao;
import poly.dao.SizeDao;
import poly.entity.ChatLieu;
import poly.entity.DanhMuc;
import poly.entity.DonViTinh;
import poly.entity.MauSac;
import poly.entity.Size;
import poly.helper.CustomTabbedPaneUI;
import poly.helper.Messeger;
import poly.helper.XDate;
import poly.helper.XInternal;
import poly.helper.XValidate;

/**
 *
 * @author NTV
 */
public class QL_CTSPFrm extends javax.swing.JInternalFrame {

    SizeDao dao_size;
    DefaultTableModel modelTBL_Size;
    DefaultTableModel modelTBL_SizeHetHan;
    CardLayout card_size;
//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    DanhMucDao dao_dm;
    DefaultTableModel modelTBL_DanhMuc;
    DefaultTableModel modelTBL_DanhMucHetHan;
    CardLayout card_DanhMuc;
//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    MaMauDao dao_ms;
    DefaultTableModel modelTBL_MauSac;
    DefaultTableModel modelTBL_MauSacHetHan;
    CardLayout card_MauSac;
//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ChatLieuDao dao_cl;
    DefaultTableModel modelTBL_ChatLieu;
    DefaultTableModel modelTBL_ChatLieuHetHan;
    CardLayout card_ChatLieu;
    //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    DonViTinhDao dao_dvt;
    DefaultTableModel modelTBL_DVT;
    DefaultTableModel modelTBL_DVTHetHan;
    CardLayout card_DVT;
    NewMainFrm mainFrm;

    /**
     * Creates new form QL_CTSPFrm
     */
    public QL_CTSPFrm(JFrame jFrame) {
        initComponents();
        mainFrm = (NewMainFrm) jFrame;
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        pnlTabs = new javax.swing.JTabbedPane();
        Size = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel26 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtSize_TenSize = new javax.swing.JTextField();
        jPanel24 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtSize_MaSize = new javax.swing.JTextField();
        btn_Change_Table_Size = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        btn_Moi_qlSize = new javax.swing.JButton();
        btn_Them_qlSize = new javax.swing.JButton();
        btn_Xoa_qlSize = new javax.swing.JButton();
        btn_Sua_qlSize = new javax.swing.JButton();
        btn_TrangThai_Size = new javax.swing.JButton();
        jpnSanPham_cardGoc = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblSize = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSize_HetHan = new javax.swing.JTable();
        DanhMuc = new javax.swing.JPanel();
        jPanel31 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtDanhMuc_MaDM = new javax.swing.JTextField();
        jPanel28 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtDanhMuc_TenDM = new javax.swing.JTextField();
        jPanel29 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        txtDanhMuc_NgayThem = new javax.swing.JTextField();
        jPanel30 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtDanhMuc_NgayHomNay = new javax.swing.JTextField();
        btn_Change_tblDanhMuc = new javax.swing.JButton();
        jPanel32 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        btn_Moi_qlDanhMuc = new javax.swing.JButton();
        btn_Them_qlDanhMuc = new javax.swing.JButton();
        btn_Xoa_qlDanhMuc = new javax.swing.JButton();
        btn_Sua_qlDanhMuc = new javax.swing.JButton();
        btn_TrangThai_DanhMuc = new javax.swing.JButton();
        jpnDanhMuc = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblDanhMuc = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblDanhMucHetHan = new javax.swing.JTable();
        MauSac = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel35 = new javax.swing.JPanel();
        jPanel33 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtMauSac_MaMau = new javax.swing.JTextField();
        jPanel34 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        txtMauSac_TenMau = new javax.swing.JTextField();
        btn_Change_TableMauSac = new javax.swing.JButton();
        jPanel36 = new javax.swing.JPanel();
        cardGocMauSac = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblMauSac = new javax.swing.JTable();
        jPanel15 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblMauSacHetHan = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        btn_Moi_qlMauSac = new javax.swing.JButton();
        btn_Them_qlMauSac = new javax.swing.JButton();
        btn_Xoa_qlMauSac = new javax.swing.JButton();
        btn_Sua_qlMauSac = new javax.swing.JButton();
        btn_TrangThai_MS = new javax.swing.JButton();
        ChatLieu = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jPanel39 = new javax.swing.JPanel();
        jPanel37 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        txtCL_MaCL = new javax.swing.JTextField();
        jPanel38 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        txtCL_TenCL = new javax.swing.JTextField();
        btn_Change_TableCL = new javax.swing.JButton();
        jPanel40 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        btn_Moi_qlChatLieu = new javax.swing.JButton();
        btn_Them_qlChatLieu = new javax.swing.JButton();
        btn_Xoa_qlChatLieu = new javax.swing.JButton();
        btn_Sua_qlChatLieu = new javax.swing.JButton();
        btn_TrangThai_CL = new javax.swing.JButton();
        cardGocChatLieu = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        tblCL = new javax.swing.JTable();
        jPanel23 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        tblCLHetHan = new javax.swing.JTable();
        DonViTinh = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jPanel43 = new javax.swing.JPanel();
        jPanel42 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        txtDVT_TenDVT = new javax.swing.JTextField();
        jPanel41 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        txtDVT_MaDVT = new javax.swing.JTextField();
        btn_Change_TableDVT = new javax.swing.JButton();
        jPanel44 = new javax.swing.JPanel();
        cardGocDVT = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblDVT = new javax.swing.JTable();
        jPanel19 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        tblDVTHetHan = new javax.swing.JTable();
        jPanel17 = new javax.swing.JPanel();
        btn_Moi_qlDVT = new javax.swing.JButton();
        btn_Them_qlDVT = new javax.swing.JButton();
        btn_Xoa_qlDVT = new javax.swing.JButton();
        btn_Sua_qlDVT = new javax.swing.JButton();
        btn_TrangThai_DonViTinh = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(255, 102, 51));
        jPanel1.setPreferredSize(new java.awt.Dimension(1169, 35));
        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CHI TIẾT SẢN PHẨM");
        jPanel1.add(jLabel1);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        pnlTabs.setBackground(new java.awt.Color(204, 153, 0));
        pnlTabs.setForeground(new java.awt.Color(255, 255, 255));
        pnlTabs.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        pnlTabs.setOpaque(true);

        Size.setLayout(new java.awt.BorderLayout());

        jPanel3.setBackground(new java.awt.Color(0, 153, 153));
        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 10));

        jPanel26.setBackground(new java.awt.Color(0, 153, 153));
        jPanel26.setPreferredSize(new java.awt.Dimension(800, 135));
        jPanel26.setLayout(new java.awt.GridLayout(1, 0, 30, 10));

        jPanel25.setBackground(new java.awt.Color(0, 153, 153));
        jPanel25.setLayout(new java.awt.GridLayout(2, 1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Tên Size");
        jLabel3.setPreferredSize(new java.awt.Dimension(200, 20));
        jPanel25.add(jLabel3);

        txtSize_TenSize.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtSize_TenSize.setPreferredSize(new java.awt.Dimension(200, 20));
        jPanel25.add(txtSize_TenSize);

        jPanel26.add(jPanel25);

        jPanel24.setBackground(new java.awt.Color(0, 153, 153));
        jPanel24.setLayout(new java.awt.GridLayout(2, 1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Mã Size");
        jLabel2.setPreferredSize(new java.awt.Dimension(200, 20));
        jPanel24.add(jLabel2);

        txtSize_MaSize.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtSize_MaSize.setPreferredSize(new java.awt.Dimension(200, 20));
        jPanel24.add(txtSize_MaSize);

        jPanel26.add(jPanel24);

        jPanel3.add(jPanel26);

        btn_Change_Table_Size.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Change_Table_Size.setText("Hết Hạn");
        btn_Change_Table_Size.setPreferredSize(new java.awt.Dimension(135, 135));
        btn_Change_Table_Size.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Change_Table_SizeActionPerformed(evt);
            }
        });
        jPanel3.add(btn_Change_Table_Size);

        Size.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jPanel11.setLayout(new java.awt.BorderLayout());

        jPanel4.setBackground(new java.awt.Color(204, 204, 0));

        btn_Moi_qlSize.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Moi_qlSize.setText("Mới");
        btn_Moi_qlSize.setPreferredSize(new java.awt.Dimension(100, 40));
        btn_Moi_qlSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Moi_qlSizeActionPerformed(evt);
            }
        });
        jPanel4.add(btn_Moi_qlSize);

        btn_Them_qlSize.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Them_qlSize.setText("Thêm");
        btn_Them_qlSize.setPreferredSize(new java.awt.Dimension(100, 40));
        btn_Them_qlSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Them_qlSizeActionPerformed(evt);
            }
        });
        jPanel4.add(btn_Them_qlSize);

        btn_Xoa_qlSize.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Xoa_qlSize.setText("Xóa");
        btn_Xoa_qlSize.setPreferredSize(new java.awt.Dimension(100, 40));
        btn_Xoa_qlSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Xoa_qlSizeActionPerformed(evt);
            }
        });
        jPanel4.add(btn_Xoa_qlSize);

        btn_Sua_qlSize.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Sua_qlSize.setText("Sửa");
        btn_Sua_qlSize.setPreferredSize(new java.awt.Dimension(100, 40));
        btn_Sua_qlSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Sua_qlSizeActionPerformed(evt);
            }
        });
        jPanel4.add(btn_Sua_qlSize);

        btn_TrangThai_Size.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_TrangThai_Size.setText("Chuyển Trạng Thái");
        btn_TrangThai_Size.setPreferredSize(new java.awt.Dimension(240, 40));
        btn_TrangThai_Size.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_TrangThai_SizeActionPerformed(evt);
            }
        });
        jPanel4.add(btn_TrangThai_Size);

        jPanel11.add(jPanel4, java.awt.BorderLayout.NORTH);

        jpnSanPham_cardGoc.setLayout(new java.awt.CardLayout());

        jPanel5.setBackground(new java.awt.Color(0, 0, 0));
        jPanel5.setLayout(new java.awt.BorderLayout());

        tblSize.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tblSize.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã SiZe", "Tên Size"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSize.setRowHeight(32);
        tblSize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSizeMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tblSize);

        jPanel5.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        jpnSanPham_cardGoc.add(jPanel5, "card_goc");

        jPanel6.setBackground(new java.awt.Color(0, 0, 0));
        jPanel6.setLayout(new java.awt.BorderLayout());

        tblSize_HetHan.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tblSize_HetHan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã SiZe", "Tên Size"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSize_HetHan.setRowHeight(32);
        tblSize_HetHan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSize_HetHanMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblSize_HetHan);

        jPanel6.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jpnSanPham_cardGoc.add(jPanel6, "card_phu");

        jPanel11.add(jpnSanPham_cardGoc, java.awt.BorderLayout.CENTER);

        Size.add(jPanel11, java.awt.BorderLayout.CENTER);

        pnlTabs.addTab("Quản Lý Size", Size);

        DanhMuc.setLayout(new java.awt.BorderLayout());

        jPanel31.setBackground(new java.awt.Color(0, 153, 153));
        jPanel31.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 10));

        jPanel7.setBackground(new java.awt.Color(0, 153, 153));
        jPanel7.setPreferredSize(new java.awt.Dimension(800, 260));
        jPanel7.setLayout(new java.awt.GridLayout(2, 2, 10, 10));

        jPanel27.setBackground(new java.awt.Color(0, 153, 153));
        jPanel27.setLayout(new java.awt.GridLayout(2, 1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Mã Danh Mục");
        jPanel27.add(jLabel4);

        txtDanhMuc_MaDM.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jPanel27.add(txtDanhMuc_MaDM);

        jPanel7.add(jPanel27);

        jPanel28.setBackground(new java.awt.Color(0, 153, 153));
        jPanel28.setLayout(new java.awt.GridLayout(2, 1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Tên Danh Mục");
        jPanel28.add(jLabel5);

        txtDanhMuc_TenDM.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jPanel28.add(txtDanhMuc_TenDM);

        jPanel7.add(jPanel28);

        jPanel29.setBackground(new java.awt.Color(0, 153, 153));
        jPanel29.setLayout(new java.awt.GridLayout(2, 1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Ngày Thêm");
        jPanel29.add(jLabel7);

        txtDanhMuc_NgayThem.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jPanel29.add(txtDanhMuc_NgayThem);

        jPanel7.add(jPanel29);

        jPanel30.setBackground(new java.awt.Color(0, 153, 153));
        jPanel30.setLayout(new java.awt.GridLayout(2, 1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("Ngày Hôm Nay");
        jPanel30.add(jLabel8);

        txtDanhMuc_NgayHomNay.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jPanel30.add(txtDanhMuc_NgayHomNay);

        jPanel7.add(jPanel30);

        jPanel31.add(jPanel7);

        btn_Change_tblDanhMuc.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Change_tblDanhMuc.setText("Hết Hạn");
        btn_Change_tblDanhMuc.setPreferredSize(new java.awt.Dimension(135, 135));
        btn_Change_tblDanhMuc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Change_tblDanhMucActionPerformed(evt);
            }
        });
        jPanel31.add(btn_Change_tblDanhMuc);

        DanhMuc.add(jPanel31, java.awt.BorderLayout.NORTH);

        jPanel32.setLayout(new java.awt.BorderLayout());

        jPanel8.setBackground(new java.awt.Color(153, 153, 0));

        btn_Moi_qlDanhMuc.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Moi_qlDanhMuc.setText("Mới");
        btn_Moi_qlDanhMuc.setPreferredSize(new java.awt.Dimension(100, 40));
        btn_Moi_qlDanhMuc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Moi_qlDanhMucActionPerformed(evt);
            }
        });
        jPanel8.add(btn_Moi_qlDanhMuc);

        btn_Them_qlDanhMuc.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Them_qlDanhMuc.setText("Thêm");
        btn_Them_qlDanhMuc.setPreferredSize(new java.awt.Dimension(100, 40));
        btn_Them_qlDanhMuc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Them_qlDanhMucActionPerformed(evt);
            }
        });
        jPanel8.add(btn_Them_qlDanhMuc);

        btn_Xoa_qlDanhMuc.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Xoa_qlDanhMuc.setText("Xóa");
        btn_Xoa_qlDanhMuc.setPreferredSize(new java.awt.Dimension(100, 40));
        btn_Xoa_qlDanhMuc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Xoa_qlDanhMucActionPerformed(evt);
            }
        });
        jPanel8.add(btn_Xoa_qlDanhMuc);

        btn_Sua_qlDanhMuc.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Sua_qlDanhMuc.setText("Sửa");
        btn_Sua_qlDanhMuc.setPreferredSize(new java.awt.Dimension(100, 40));
        btn_Sua_qlDanhMuc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Sua_qlDanhMucActionPerformed(evt);
            }
        });
        jPanel8.add(btn_Sua_qlDanhMuc);

        btn_TrangThai_DanhMuc.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_TrangThai_DanhMuc.setText("Chuyển Trạng Thái");
        btn_TrangThai_DanhMuc.setPreferredSize(new java.awt.Dimension(240, 40));
        btn_TrangThai_DanhMuc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_TrangThai_DanhMucActionPerformed(evt);
            }
        });
        jPanel8.add(btn_TrangThai_DanhMuc);

        jPanel32.add(jPanel8, java.awt.BorderLayout.NORTH);

        jpnDanhMuc.setLayout(new java.awt.CardLayout());

        jPanel9.setBackground(new java.awt.Color(0, 0, 0));
        jPanel9.setLayout(new java.awt.BorderLayout());

        tblDanhMuc.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tblDanhMuc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã DM", "Tên DM", "Ngày Thêm"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDanhMuc.setRowHeight(32);
        tblDanhMuc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDanhMucMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblDanhMuc);

        jPanel9.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jpnDanhMuc.add(jPanel9, "card_goc");

        jPanel10.setBackground(new java.awt.Color(0, 0, 0));
        jPanel10.setLayout(new java.awt.BorderLayout());

        tblDanhMucHetHan.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tblDanhMucHetHan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã DM", "Tên DM", "Ngày Thêm"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDanhMucHetHan.setRowHeight(32);
        tblDanhMucHetHan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDanhMucHetHanMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblDanhMucHetHan);

        jPanel10.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jpnDanhMuc.add(jPanel10, "card_phu");

        jPanel32.add(jpnDanhMuc, java.awt.BorderLayout.CENTER);

        DanhMuc.add(jPanel32, java.awt.BorderLayout.CENTER);

        pnlTabs.addTab("Quản Lý Danh Mục", DanhMuc);

        MauSac.setLayout(new java.awt.BorderLayout());

        jPanel12.setBackground(new java.awt.Color(255, 204, 255));
        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 10));

        jPanel35.setBackground(new java.awt.Color(255, 204, 255));
        jPanel35.setPreferredSize(new java.awt.Dimension(800, 135));
        jPanel35.setLayout(new java.awt.GridLayout(1, 0, 20, 20));

        jPanel33.setBackground(new java.awt.Color(255, 204, 255));
        jPanel33.setLayout(new java.awt.GridLayout(2, 1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Mã Màu");
        jPanel33.add(jLabel6);

        txtMauSac_MaMau.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jPanel33.add(txtMauSac_MaMau);

        jPanel35.add(jPanel33);

        jPanel34.setBackground(new java.awt.Color(255, 204, 255));
        jPanel34.setLayout(new java.awt.GridLayout(2, 1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setText("Tên Màu");
        jPanel34.add(jLabel9);

        txtMauSac_TenMau.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jPanel34.add(txtMauSac_TenMau);

        jPanel35.add(jPanel34);

        jPanel12.add(jPanel35);

        btn_Change_TableMauSac.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Change_TableMauSac.setText("Hết Hạn");
        btn_Change_TableMauSac.setPreferredSize(new java.awt.Dimension(135, 135));
        btn_Change_TableMauSac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Change_TableMauSacActionPerformed(evt);
            }
        });
        jPanel12.add(btn_Change_TableMauSac);

        MauSac.add(jPanel12, java.awt.BorderLayout.NORTH);

        jPanel36.setLayout(new java.awt.BorderLayout());

        cardGocMauSac.setLayout(new java.awt.CardLayout());

        jPanel14.setBackground(new java.awt.Color(255, 0, 0));
        jPanel14.setLayout(new java.awt.BorderLayout());

        tblMauSac.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tblMauSac.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã Màu", "Tên Màu"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMauSac.setRowHeight(32);
        tblMauSac.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMauSacMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(tblMauSac);

        jPanel14.add(jScrollPane6, java.awt.BorderLayout.CENTER);

        cardGocMauSac.add(jPanel14, "card_goc");

        jPanel15.setBackground(new java.awt.Color(255, 0, 0));
        jPanel15.setLayout(new java.awt.BorderLayout());

        tblMauSacHetHan.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tblMauSacHetHan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã Màu", "Tên Màu"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMauSacHetHan.setRowHeight(32);
        jScrollPane7.setViewportView(tblMauSacHetHan);

        jPanel15.add(jScrollPane7, java.awt.BorderLayout.CENTER);

        cardGocMauSac.add(jPanel15, "card_phu");

        jPanel36.add(cardGocMauSac, java.awt.BorderLayout.CENTER);

        jPanel13.setBackground(new java.awt.Color(255, 255, 204));
        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 20));

        btn_Moi_qlMauSac.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Moi_qlMauSac.setText("Mới");
        btn_Moi_qlMauSac.setPreferredSize(new java.awt.Dimension(100, 40));
        btn_Moi_qlMauSac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Moi_qlMauSacActionPerformed(evt);
            }
        });
        jPanel13.add(btn_Moi_qlMauSac);

        btn_Them_qlMauSac.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Them_qlMauSac.setText("Thêm");
        btn_Them_qlMauSac.setPreferredSize(new java.awt.Dimension(100, 40));
        btn_Them_qlMauSac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Them_qlMauSacActionPerformed(evt);
            }
        });
        jPanel13.add(btn_Them_qlMauSac);

        btn_Xoa_qlMauSac.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Xoa_qlMauSac.setText("Xóa");
        btn_Xoa_qlMauSac.setPreferredSize(new java.awt.Dimension(100, 40));
        btn_Xoa_qlMauSac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Xoa_qlMauSacActionPerformed(evt);
            }
        });
        jPanel13.add(btn_Xoa_qlMauSac);

        btn_Sua_qlMauSac.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Sua_qlMauSac.setText("Sửa");
        btn_Sua_qlMauSac.setPreferredSize(new java.awt.Dimension(100, 40));
        btn_Sua_qlMauSac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Sua_qlMauSacActionPerformed(evt);
            }
        });
        jPanel13.add(btn_Sua_qlMauSac);

        btn_TrangThai_MS.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_TrangThai_MS.setText("Chuyển Trạng Thái");
        btn_TrangThai_MS.setPreferredSize(new java.awt.Dimension(240, 40));
        btn_TrangThai_MS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_TrangThai_MSActionPerformed(evt);
            }
        });
        jPanel13.add(btn_TrangThai_MS);

        jPanel36.add(jPanel13, java.awt.BorderLayout.NORTH);

        MauSac.add(jPanel36, java.awt.BorderLayout.CENTER);

        pnlTabs.addTab("Quản Lý Màu Sắc", MauSac);

        ChatLieu.setLayout(new java.awt.BorderLayout());

        jPanel20.setBackground(new java.awt.Color(0, 153, 153));
        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 10));

        jPanel39.setBackground(new java.awt.Color(0, 153, 153));
        jPanel39.setPreferredSize(new java.awt.Dimension(800, 135));
        jPanel39.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        jPanel37.setBackground(new java.awt.Color(0, 153, 153));
        jPanel37.setLayout(new java.awt.GridLayout(2, 1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setText("Mã DVT");
        jPanel37.add(jLabel11);

        txtCL_MaCL.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jPanel37.add(txtCL_MaCL);

        jPanel39.add(jPanel37);

        jPanel38.setBackground(new java.awt.Color(0, 153, 153));
        jPanel38.setLayout(new java.awt.GridLayout(2, 1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel12.setText("Tên DVT");
        jPanel38.add(jLabel12);

        txtCL_TenCL.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jPanel38.add(txtCL_TenCL);

        jPanel39.add(jPanel38);

        jPanel20.add(jPanel39);

        btn_Change_TableCL.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Change_TableCL.setText("Hết Hạn");
        btn_Change_TableCL.setPreferredSize(new java.awt.Dimension(135, 135));
        btn_Change_TableCL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Change_TableCLActionPerformed(evt);
            }
        });
        jPanel20.add(btn_Change_TableCL);

        ChatLieu.add(jPanel20, java.awt.BorderLayout.NORTH);

        jPanel40.setLayout(new java.awt.BorderLayout());

        jPanel21.setBackground(new java.awt.Color(153, 153, 0));
        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 10));

        btn_Moi_qlChatLieu.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Moi_qlChatLieu.setText("Mới");
        btn_Moi_qlChatLieu.setPreferredSize(new java.awt.Dimension(100, 40));
        btn_Moi_qlChatLieu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Moi_qlChatLieuActionPerformed(evt);
            }
        });
        jPanel21.add(btn_Moi_qlChatLieu);

        btn_Them_qlChatLieu.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Them_qlChatLieu.setText("Thêm");
        btn_Them_qlChatLieu.setPreferredSize(new java.awt.Dimension(100, 40));
        btn_Them_qlChatLieu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Them_qlChatLieuActionPerformed(evt);
            }
        });
        jPanel21.add(btn_Them_qlChatLieu);

        btn_Xoa_qlChatLieu.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Xoa_qlChatLieu.setText("Xóa");
        btn_Xoa_qlChatLieu.setPreferredSize(new java.awt.Dimension(100, 40));
        btn_Xoa_qlChatLieu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Xoa_qlChatLieuActionPerformed(evt);
            }
        });
        jPanel21.add(btn_Xoa_qlChatLieu);

        btn_Sua_qlChatLieu.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Sua_qlChatLieu.setText("Sửa");
        btn_Sua_qlChatLieu.setPreferredSize(new java.awt.Dimension(100, 40));
        btn_Sua_qlChatLieu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Sua_qlChatLieuActionPerformed(evt);
            }
        });
        jPanel21.add(btn_Sua_qlChatLieu);

        btn_TrangThai_CL.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_TrangThai_CL.setText("Chuyển Trạng Thái");
        btn_TrangThai_CL.setPreferredSize(new java.awt.Dimension(240, 40));
        btn_TrangThai_CL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_TrangThai_CLActionPerformed(evt);
            }
        });
        jPanel21.add(btn_TrangThai_CL);

        jPanel40.add(jPanel21, java.awt.BorderLayout.NORTH);

        cardGocChatLieu.setLayout(new java.awt.CardLayout());

        jPanel22.setBackground(new java.awt.Color(0, 0, 0));
        jPanel22.setLayout(new java.awt.BorderLayout());

        tblCL.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tblCL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã CL", "Tên CL"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCL.setRowHeight(32);
        tblCL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCLMouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(tblCL);

        jPanel22.add(jScrollPane10, java.awt.BorderLayout.CENTER);

        cardGocChatLieu.add(jPanel22, "card_goc");

        jPanel23.setBackground(new java.awt.Color(0, 0, 0));
        jPanel23.setLayout(new java.awt.BorderLayout());

        jScrollPane11.setBackground(new java.awt.Color(0, 102, 51));

        tblCLHetHan.setBackground(new java.awt.Color(0, 153, 51));
        tblCLHetHan.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tblCLHetHan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCLHetHan.setOpaque(false);
        tblCLHetHan.setRowHeight(32);
        jScrollPane11.setViewportView(tblCLHetHan);

        jPanel23.add(jScrollPane11, java.awt.BorderLayout.CENTER);

        cardGocChatLieu.add(jPanel23, "card_phu");

        jPanel40.add(cardGocChatLieu, java.awt.BorderLayout.CENTER);

        ChatLieu.add(jPanel40, java.awt.BorderLayout.CENTER);

        pnlTabs.addTab("Quản Lý Chất Liệu", ChatLieu);

        DonViTinh.setLayout(new java.awt.BorderLayout());

        jPanel16.setBackground(new java.awt.Color(0, 153, 153));
        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 10));

        jPanel43.setBackground(new java.awt.Color(0, 153, 153));
        jPanel43.setPreferredSize(new java.awt.Dimension(800, 110));
        jPanel43.setLayout(new java.awt.GridLayout(1, 0, 10, 10));

        jPanel42.setBackground(new java.awt.Color(0, 153, 153));
        jPanel42.setLayout(new java.awt.GridLayout(2, 1));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel13.setText("Tên DVT");
        jPanel42.add(jLabel13);

        txtDVT_TenDVT.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jPanel42.add(txtDVT_TenDVT);

        jPanel43.add(jPanel42);

        jPanel41.setBackground(new java.awt.Color(0, 153, 153));
        jPanel41.setLayout(new java.awt.GridLayout(2, 1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setText("Mã DVT");
        jPanel41.add(jLabel10);

        txtDVT_MaDVT.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jPanel41.add(txtDVT_MaDVT);

        jPanel43.add(jPanel41);

        jPanel16.add(jPanel43);

        btn_Change_TableDVT.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Change_TableDVT.setText("Hết Hạn");
        btn_Change_TableDVT.setPreferredSize(new java.awt.Dimension(135, 135));
        btn_Change_TableDVT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Change_TableDVTActionPerformed(evt);
            }
        });
        jPanel16.add(btn_Change_TableDVT);

        DonViTinh.add(jPanel16, java.awt.BorderLayout.NORTH);

        jPanel44.setLayout(new java.awt.BorderLayout());

        cardGocDVT.setLayout(new java.awt.CardLayout());

        jPanel18.setBackground(new java.awt.Color(0, 102, 102));
        jPanel18.setLayout(new java.awt.BorderLayout());

        tblDVT.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tblDVT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã DVT", "Tên DVT"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDVT.setRowHeight(32);
        tblDVT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDVTMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(tblDVT);

        jPanel18.add(jScrollPane8, java.awt.BorderLayout.CENTER);

        cardGocDVT.add(jPanel18, "card_goc");

        jPanel19.setBackground(new java.awt.Color(0, 102, 102));
        jPanel19.setLayout(new java.awt.BorderLayout());

        tblDVTHetHan.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tblDVTHetHan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã DVT", "Tên DVT", "Title 3", "Title 4"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDVTHetHan.setRowHeight(32);
        tblDVTHetHan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDVTHetHanMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(tblDVTHetHan);

        jPanel19.add(jScrollPane9, java.awt.BorderLayout.CENTER);

        cardGocDVT.add(jPanel19, "card_phu");

        jPanel44.add(cardGocDVT, java.awt.BorderLayout.CENTER);

        jPanel17.setBackground(new java.awt.Color(153, 153, 0));
        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 10));

        btn_Moi_qlDVT.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Moi_qlDVT.setText("Mới");
        btn_Moi_qlDVT.setPreferredSize(new java.awt.Dimension(100, 40));
        btn_Moi_qlDVT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Moi_qlDVTActionPerformed(evt);
            }
        });
        jPanel17.add(btn_Moi_qlDVT);

        btn_Them_qlDVT.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Them_qlDVT.setText("Thêm");
        btn_Them_qlDVT.setPreferredSize(new java.awt.Dimension(100, 40));
        btn_Them_qlDVT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Them_qlDVTActionPerformed(evt);
            }
        });
        jPanel17.add(btn_Them_qlDVT);

        btn_Xoa_qlDVT.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Xoa_qlDVT.setText("Xóa");
        btn_Xoa_qlDVT.setPreferredSize(new java.awt.Dimension(100, 40));
        btn_Xoa_qlDVT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Xoa_qlDVTActionPerformed(evt);
            }
        });
        jPanel17.add(btn_Xoa_qlDVT);

        btn_Sua_qlDVT.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_Sua_qlDVT.setText("Sửa");
        btn_Sua_qlDVT.setPreferredSize(new java.awt.Dimension(100, 40));
        btn_Sua_qlDVT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Sua_qlDVTActionPerformed(evt);
            }
        });
        jPanel17.add(btn_Sua_qlDVT);

        btn_TrangThai_DonViTinh.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_TrangThai_DonViTinh.setText("Chuyển Trạng Thái");
        btn_TrangThai_DonViTinh.setPreferredSize(new java.awt.Dimension(240, 40));
        btn_TrangThai_DonViTinh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_TrangThai_DonViTinhActionPerformed(evt);
            }
        });
        jPanel17.add(btn_TrangThai_DonViTinh);

        jPanel44.add(jPanel17, java.awt.BorderLayout.PAGE_START);

        DonViTinh.add(jPanel44, java.awt.BorderLayout.CENTER);

        pnlTabs.addTab("Quản Lý DVT", DonViTinh);

        jPanel2.add(pnlTabs);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_Moi_qlSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Moi_qlSizeActionPerformed
        ResetText(txtSize_MaSize, txtSize_TenSize);
    }//GEN-LAST:event_btn_Moi_qlSizeActionPerformed

    private void btn_Them_qlSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Them_qlSizeActionPerformed
        if (XValidate.isEmpty(txtSize_TenSize)) { // validate
            Messeger.showErrorDialog(null, "Không để trống tên size", "Lỗi");
            return;
        }
        for (int i = 0; i < tblSize.getRowCount(); i++) {
            if (tblSize.getValueAt(i, 0).toString().trim().equals(txtSize_MaSize.getText().trim())) {
                Messeger.alert(null, "Đã Có Mã Trên");
                return;
            }
        }
//        if (CheckLikeName(txtSize_TenSize, tblSize, 1)) {
//            return;
//        }

        for (int i = 0; i < tblSize_HetHan.getRowCount(); i++) {
            if (txtSize_MaSize.getText().trim().equals(tblSize_HetHan.getValueAt(i, 0))) {
                String tensize = tblSize_HetHan.getValueAt(i, 1).toString();
                if (txtSize_TenSize.getText().trim().length() > 0) {
                    tensize = txtSize_TenSize.getText();
                }
                try {
                    if (!Messeger.confirm(null, "Bạn Có Muốn Thêm Không")) {
                        return;
                    }
                    dao_size.update(new Size(txtSize_MaSize.getText(), tensize, true));
                    ResetText(txtSize_MaSize, txtSize_TenSize);
                    LoadDataToTableSize();
                    LoadDataToTableSizeHetHan();
                    return;
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }

        }
        try {
            if (!Messeger.confirm(null, "Bạn Có Muốn Thêm Không")) {
                return;
            }
            dao_size.insert(new Size(txtSize_MaSize.getText().trim(), txtSize_TenSize.getText()));
            LoadDataToTableSize();
            ResetText(txtSize_MaSize, txtSize_TenSize);
        } catch (Exception ex) {
            ex.printStackTrace();
            Messeger.showErrorDialog(null, ex.getMessage(), "Error");
        }
    }//GEN-LAST:event_btn_Them_qlSizeActionPerformed

    private void btn_Xoa_qlSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Xoa_qlSizeActionPerformed
        if (XValidate.isEmpty(txtSize_MaSize)) {
            Messeger.showErrorDialog(null, "Không để trống mã size", "Lỗi");
            return;
        }

        for (int i = 0; i < tblSize.getRowCount(); i++) {
            if (txtSize_MaSize.getText().trim().equals(tblSize.getValueAt(i, 0))) {
                if (!Messeger.confirm(null, "Bạn Có Xóa Không ?")) {
                    return;
                }

                try {
                    dao_size.delete(txtSize_MaSize.getText());
                    ResetText(txtSize_MaSize, txtSize_TenSize);
                    LoadDataToTableSize();
                    LoadDataToTableSizeHetHan();
                    return;
                } catch (Exception ex) {
                    ex.printStackTrace();
                    Messeger.showErrorDialog(null, ex.getMessage(), "Error");
                }
            }
        }
        Messeger.alert(null, "Không Có Mã Size này để xóa");
    }//GEN-LAST:event_btn_Xoa_qlSizeActionPerformed

    private void btn_Sua_qlSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Sua_qlSizeActionPerformed
        if (!Messeger.confirm(null, "Bạn Có Muốn Sửa Không ?")) {
            return;
        }
        if (XValidate.isEmpty(txtSize_MaSize)) {
            Messeger.showErrorDialog(null, "Không để trống mã size", "Lỗi");
            return;
        }
        if (XValidate.isEmpty(txtSize_TenSize)) {
            Messeger.showErrorDialog(null, "Không để trống tên size", "Lỗi");
            return;
        }
        for (int i = 0; i < tblSize.getRowCount(); i++) {
            if (txtSize_MaSize.getText().trim().equals(tblSize.getValueAt(i, 0).toString().trim())) {
                try {
                    dao_size.update(new Size(txtSize_MaSize.getText(), txtSize_TenSize.getText(), true));
                    LoadDataToTableSize();
                    return;
                } catch (Exception ex) {
                    ex.printStackTrace();
                    Messeger.showErrorDialog(null, ex.getMessage(), "Error");
                }
            }
        }
        Messeger.alert(null, "Không Có Mã Size này");
    }//GEN-LAST:event_btn_Sua_qlSizeActionPerformed

    private void btn_TrangThai_SizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_TrangThai_SizeActionPerformed
        if (tblSize_HetHan.getRowCount() == 0) {
            Messeger.alert(null, "Không Có Size Cần Chuyển");
            return;
        }
        int viTri = tblSize_HetHan.getSelectedRow();
        if (viTri < 0) {
            Messeger.alert(null, " Vui Lòng Chọn Vào Size Muốn Chuyển Trạng Thái");
            return;
        }
        try {
            dao_size.update(new Size(tblSize_HetHan.getValueAt(viTri, 0).toString(),
                    tblSize_HetHan.getValueAt(viTri, 1).toString(), true));
            ResetText(txtSize_MaSize, txtSize_TenSize);
            LoadDataToTableSize();
            LoadDataToTableSizeHetHan();
            return;
        } catch (Exception ex) {
            ex.printStackTrace();
            Messeger.showErrorDialog(null, ex.getMessage(), "Error");
        }
    }//GEN-LAST:event_btn_TrangThai_SizeActionPerformed

    private void btn_Change_Table_SizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Change_Table_SizeActionPerformed
        if (btn_Change_Table_Size.getText().equalsIgnoreCase("Hết Hạn")) {
            card_size.show(jpnSanPham_cardGoc, "card_phu");
            SetEnable(btn_Moi_qlSize, btn_Sua_qlSize, btn_Xoa_qlSize, btn_Them_qlSize, false);
            btn_Change_Table_Size.setText("Trở Lại");
            btn_TrangThai_Size.setVisible(true);
        } else {
            card_size.show(jpnSanPham_cardGoc, "card_goc");
            SetEnable(btn_Moi_qlSize, btn_Sua_qlSize, btn_Xoa_qlSize, btn_Them_qlSize, true);
            btn_Change_Table_Size.setText("Hết Hạn");
            btn_TrangThai_Size.setVisible(false);
        }
    }//GEN-LAST:event_btn_Change_Table_SizeActionPerformed

    private void tblSizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSizeMouseClicked
        int viTri = tblSize.getSelectedRow();
        if (viTri < 0) {
            return;
        }
        Settext(tblSize, txtSize_MaSize, txtSize_TenSize, viTri);
    }//GEN-LAST:event_tblSizeMouseClicked

    private void tblSize_HetHanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSize_HetHanMouseClicked
        int viTri = tblSize_HetHan.getSelectedRow();
        if (viTri < 0) {
            return;
        }
        Settext(tblSize_HetHan, txtSize_MaSize, txtSize_TenSize, viTri);
    }//GEN-LAST:event_tblSize_HetHanMouseClicked

    private void btn_Moi_qlDanhMucActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Moi_qlDanhMucActionPerformed
        ResetText(txtDanhMuc_MaDM, txtDanhMuc_TenDM, txtDanhMuc_NgayThem);
    }//GEN-LAST:event_btn_Moi_qlDanhMucActionPerformed

    private void btn_Them_qlDanhMucActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Them_qlDanhMucActionPerformed
        //        if (txtDanhMuc_MaDM.getText().trim().length() > 0 | txtDanhMuc_NgayThem.getText().trim().length() > 0) {
        //            Messeger.alert(null, "Khi Thêm Danh Mục , Không Cần Nhập Mã Danh Mục Và Ngày Thêm ");
        //            txtDanhMuc_MaDM.setText("");
        //            txtDanhMuc_NgayThem.setText("");
        //            return;
        //        }

        if (CheckLikeName(txtDanhMuc_TenDM, tblDanhMuc, 1)) {
            return;
        }
        if (!Validate_DanhMuc()) {
            return;
        }
        String x = String.valueOf(java.time.LocalDate.now());
        try {
            if (!Messeger.confirm(null, "Bạn Có Muốn Thêm Không ?")) {
                return;
            }
            dao_dm.insert(new DanhMuc(txtDanhMuc_TenDM.getText(), x));
            LoadDataToTableDanhMuc();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btn_Them_qlDanhMucActionPerformed

    private void btn_Xoa_qlDanhMucActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Xoa_qlDanhMucActionPerformed
        for (int i = 0; i < tblDanhMuc.getRowCount(); i++) {
            if (txtDanhMuc_MaDM.getText().trim().equals(tblDanhMuc.getValueAt(i, 0).toString())) {
                if (!Messeger.confirm(null, "Bạn Có Xóa Không ?")) {
                    return;
                }
                try {
                    dao_dm.delete(txtDanhMuc_MaDM.getText());
                    LoadDataToTableDanhMuc();
                    LoadDataToTableDanhMucHetHan();
                    ResetText(txtDanhMuc_MaDM, txtDanhMuc_TenDM, txtDanhMuc_NgayThem);
                    return;
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
        Messeger.alert(null, "Không Có Mã Size này để xóa");
    }//GEN-LAST:event_btn_Xoa_qlDanhMucActionPerformed

    private void btn_Sua_qlDanhMucActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Sua_qlDanhMucActionPerformed
        String DayUpdate = String.valueOf(java.time.LocalDate.now());
        if (!Messeger.confirm(null, "Bạn Có Muốn Sửa Ngày Thêm Thành Ngày Hiện Tại Không")) {
            for (int i = 0; i < tblDanhMuc.getRowCount(); i++) {
                if (txtDanhMuc_MaDM.getText().equals(tblDanhMuc.getValueAt(i, 0).toString())) {
                    DayUpdate = XDate.toString(XDate.toDate(String.valueOf(tblDanhMuc.getValueAt(i, 2)), "dd/MM/yyyy"), "yyyy-MM-dd");
                }
            }
        }
        try {
            if (!Messeger.confirm(null, "Bạn Có Chắc Chắn Muốn Sửa Không ?")) {
                return;
            }
            dao_dm.update(new DanhMuc(Integer.parseInt(txtDanhMuc_MaDM.getText()), txtDanhMuc_TenDM.getText(), DayUpdate, true));
            LoadDataToTableDanhMuc();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btn_Sua_qlDanhMucActionPerformed

    private void btn_TrangThai_DanhMucActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_TrangThai_DanhMucActionPerformed
        if (tblDanhMucHetHan.getRowCount() == 0) {
            Messeger.alert(null, "Không Có Size Cần Chuyển");
            return;
        }
        int viTri = tblDanhMucHetHan.getSelectedRow();
        if (viTri < 0) {
            Messeger.alert(null, " Vui Lòng Chọn Vào Size Muốn Chuyển Trạng Thái");
            return;
        }
        String dayUpdate = XDate.toString(XDate.toDate(String.valueOf(tblDanhMucHetHan.getValueAt(viTri, 2)), "dd/MM/yyyy"), "yyyy-MM-dd");
        try {
            dao_dm.update(new DanhMuc(
                    Integer.parseInt(tblDanhMucHetHan.getValueAt(viTri, 0).toString()),
                    String.valueOf(tblDanhMucHetHan.getValueAt(viTri, 1).toString()),
                    dayUpdate,
                    true));
            LoadDataToTableDanhMuc();
            LoadDataToTableDanhMucHetHan();
            Messeger.alert(null, "Chuyển Trạng Thái Thành Công");
        } catch (Exception ex) {
            ex.printStackTrace();
            Messeger.showErrorDialog(null, ex.getMessage(), "Error");
        }
    }//GEN-LAST:event_btn_TrangThai_DanhMucActionPerformed

    private void btn_Change_tblDanhMucActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Change_tblDanhMucActionPerformed
        if (btn_Change_tblDanhMuc.getText().equalsIgnoreCase("Hết Hạn")) {
            btn_TrangThai_DanhMuc.setVisible(true);
            card_DanhMuc.show(jpnDanhMuc, "card_phu");
            SetEnable(btn_Moi_qlDanhMuc, btn_Sua_qlDanhMuc, btn_Xoa_qlDanhMuc, btn_Them_qlDanhMuc, false);
            btn_Change_tblDanhMuc.setText("Trở Lại");
        } else {
            btn_TrangThai_DanhMuc.setVisible(false);
            card_DanhMuc.show(jpnDanhMuc, "card_goc");
            SetEnable(btn_Moi_qlDanhMuc, btn_Sua_qlDanhMuc, btn_Xoa_qlDanhMuc, btn_Them_qlDanhMuc, true);
            btn_Change_tblDanhMuc.setText("Hết Hạn");
        }
    }//GEN-LAST:event_btn_Change_tblDanhMucActionPerformed

    private void tblDanhMucMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDanhMucMouseClicked
        int viTri = tblDanhMuc.getSelectedRow();
        if (viTri < 0) {
            return;
        }
        Settext(tblDanhMuc, txtDanhMuc_MaDM, txtDanhMuc_TenDM, txtDanhMuc_NgayThem, viTri);
    }//GEN-LAST:event_tblDanhMucMouseClicked

    private void tblDanhMucHetHanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDanhMucHetHanMouseClicked
        int viTri = tblDanhMucHetHan.getSelectedRow();
        if (viTri < 0) {
            return;
        }
        Settext(tblDanhMucHetHan, txtDanhMuc_MaDM, txtDanhMuc_TenDM, txtDanhMuc_NgayThem, viTri);
    }//GEN-LAST:event_tblDanhMucHetHanMouseClicked

    private void btn_Moi_qlMauSacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Moi_qlMauSacActionPerformed
        ResetText(txtMauSac_MaMau, txtMauSac_TenMau);
    }//GEN-LAST:event_btn_Moi_qlMauSacActionPerformed

    private void btn_Them_qlMauSacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Them_qlMauSacActionPerformed
        if (CheckLikeName(txtMauSac_TenMau, tblMauSac, 1)) {
            return;
        }
        for (int i = 0; i < tblMauSac.getRowCount(); i++) {
            if (tblMauSac.getValueAt(i, 1).toString().trim().equalsIgnoreCase(txtMauSac_TenMau.getText().trim())) {
                Messeger.alert(null, "Đã Có Mã Trên");
                return;
            }
        }
        try {
            if (!Messeger.confirm(null, "Bạn Có Muốn Thêm Không")) {
                return;
            }
            if (XValidate.isEmpty(txtMauSac_TenMau)) {
                Messeger.showErrorDialog(null, "Không để trống tên màu sắc", "Lỗi");
                return;
            }
            dao_ms.insert(new MauSac(txtMauSac_TenMau.getText()));
            LoadDataToTableMauSac();
            ResetText(txtMauSac_MaMau, txtMauSac_TenMau);
        } catch (Exception ex) {
            ex.printStackTrace();
            Messeger.showErrorDialog(null, ex.getMessage(), "Error");
        }
    }//GEN-LAST:event_btn_Them_qlMauSacActionPerformed

    private void btn_Xoa_qlMauSacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Xoa_qlMauSacActionPerformed
        if (tblMauSac.getSelectedRow() == -1) {
            Messeger.alert(null, " Vui Lòng Chọn Trên table Để Xóa");
            return;
        }

        if (XValidate.isEmpty(txtMauSac_MaMau)) {
            Messeger.showErrorDialog(null, "Không để trống mã màu sắc", "Lỗi");
            return;
        }
        try {
            if (!Messeger.confirm(null, "Bạn Có Xóa Không ?")) {
                return;
            }
            dao_ms.delete(txtMauSac_MaMau.getText());
            LoadDataToTableMauSac();
            LoadDataToTableMauSacHetHan();
            ResetText(txtMauSac_MaMau, txtMauSac_TenMau);
            return;
        } catch (Exception ex) {
            ex.printStackTrace();
            Messeger.showErrorDialog(null, ex.getMessage(), "Error");
        }

        Messeger.alert(null, "Không Có Mã Sản Phẩm này để xóa");
    }//GEN-LAST:event_btn_Xoa_qlMauSacActionPerformed

    private void btn_Sua_qlMauSacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Sua_qlMauSacActionPerformed
        if (tblMauSac.getSelectedRow() == -1) {
            Messeger.alert(null, " Vui Lòng Chọn Trên table Để Sửa");
            return;
        }
        if (XValidate.isEmpty(txtMauSac_TenMau)) {
            Messeger.showErrorDialog(null, "Không để trống tên màu sắc", "Lỗi");
            return;
        }
        try {
            if (!Messeger.confirm(null, "Bạn Có Muốn Sửa Không ?")) {
                return;
            }
            dao_ms.update(new MauSac(Integer.parseInt(txtMauSac_MaMau.getText()), txtMauSac_TenMau.getText(), true));
            LoadDataToTableMauSac();
            return;
        } catch (Exception ex) {
            ex.printStackTrace();
            Messeger.showErrorDialog(null, ex.getMessage(), "Error");
        }
        Messeger.alert(null, "Không Có Mã Sản Phẩm này");
    }//GEN-LAST:event_btn_Sua_qlMauSacActionPerformed

    private void btn_TrangThai_MSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_TrangThai_MSActionPerformed
        int viTri = tblMauSacHetHan.getSelectedRow();
        if (viTri == -1) {
            Messeger.alert(null, "Vui Lòng Chọn Sản Phẩm Muốn Chuyển");
            return;
        }
        try {
            dao_ms.update(new MauSac(Integer.parseInt(tblMauSacHetHan.getValueAt(viTri, 0).toString()), tblMauSacHetHan.getValueAt(viTri, 1).toString(), true));
            LoadDataToTableMauSac();
            LoadDataToTableMauSacHetHan();
            Messeger.alert(null, "Chuyển Đổi Trạng Thái Thành Công");
        } catch (Exception ex) {
            ex.printStackTrace();
            Messeger.showErrorDialog(null, ex.getMessage(), "Error");
        }
    }//GEN-LAST:event_btn_TrangThai_MSActionPerformed

    private void btn_Change_TableMauSacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Change_TableMauSacActionPerformed
        if (btn_Change_TableMauSac.getText().equalsIgnoreCase("Hết Hạn")) {
            card_MauSac.show(cardGocMauSac, "card_phu");
            SetEnable(btn_Moi_qlMauSac, btn_Sua_qlMauSac, btn_Xoa_qlMauSac, btn_Them_qlMauSac, false);
            btn_Change_TableMauSac.setText("Trở Lại");
        } else {
            card_MauSac.show(cardGocMauSac, "card_goc");
            SetEnable(btn_Moi_qlMauSac, btn_Sua_qlMauSac, btn_Xoa_qlMauSac, btn_Them_qlMauSac, true);
            btn_Change_TableMauSac.setText("Hết Hạn");
        }
    }//GEN-LAST:event_btn_Change_TableMauSacActionPerformed

    private void tblMauSacMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMauSacMouseClicked
        int viTri = tblMauSac.getSelectedRow();
        if (viTri < 0) {
            return;
        }
        Settext(tblMauSac, txtMauSac_MaMau, txtMauSac_TenMau, viTri);
    }//GEN-LAST:event_tblMauSacMouseClicked

    private void btn_Moi_qlChatLieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Moi_qlChatLieuActionPerformed
        ResetText(txtCL_MaCL, txtCL_TenCL);
    }//GEN-LAST:event_btn_Moi_qlChatLieuActionPerformed

    private void btn_Them_qlChatLieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Them_qlChatLieuActionPerformed
        if (CheckLikeName(txtCL_TenCL, tblCL, 1)) {
            return;
        }
        try {
            if (XValidate.isEmpty(txtCL_TenCL)) {
                Messeger.showErrorDialog(null, "Không để trống tên chất liệu", "Lỗi");
                return;
            }
            if (!Messeger.confirm(null, "Bạn Có Muốn Thêm Không")) {
                return;
            }
            dao_cl.insert(new ChatLieu(txtCL_TenCL.getText(), true));
            LoadDataToTableChatLieu();
            ResetText(txtCL_MaCL, txtCL_TenCL);
        } catch (Exception ex) {
            ex.printStackTrace();
            Messeger.showErrorDialog(null, ex.getMessage(), "Error");
        }
    }//GEN-LAST:event_btn_Them_qlChatLieuActionPerformed

    private void btn_Xoa_qlChatLieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Xoa_qlChatLieuActionPerformed
        try {
            if (tblCL.getSelectedRow() == -1) {
                Messeger.alert(null, " Vui Lòng Chọn Trên table Để Xóa");
                return;
            }
            if (!Messeger.confirm(null, "Bạn Có Muốn Xóa  Không")) {
                return;
            }
            dao_cl.delete(txtCL_MaCL.getText());
            LoadDataToTableChatLieu();
            LoadDataToTableChatLieuHetHan();
            ResetText(txtCL_MaCL, txtCL_TenCL);
            return;
        } catch (Exception ex) {
            ex.printStackTrace();
            Messeger.showErrorDialog(null, ex.getMessage(), "Error");
        }
    }//GEN-LAST:event_btn_Xoa_qlChatLieuActionPerformed

    private void btn_Sua_qlChatLieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Sua_qlChatLieuActionPerformed
        try {
            if (tblCL.getSelectedRow() == -1) {
                Messeger.alert(null, " Vui Lòng Chọn Trên table Để Sửa");
                return;
            }

            if (XValidate.isEmpty(txtCL_MaCL)) {
                Messeger.showErrorDialog(null, "Không để trống mã chất liệu", "Lỗi");
                return;
            }
            if (XValidate.isEmpty(txtCL_TenCL)) {
                Messeger.showErrorDialog(null, "Không để trống tên chất liệu", "Lỗi");
                return;
            }
            if (!Messeger.confirm(null, "Bạn Có Muốn Sửa  Không")) {
                return;
            }
            dao_cl.update(new ChatLieu(Integer.parseInt(txtCL_MaCL.getText()), txtCL_TenCL.getText(), true));
            LoadDataToTableChatLieu();
            return;
        } catch (Exception ex) {
            ex.printStackTrace();
            Messeger.showErrorDialog(null, ex.getMessage(), "Error");
        }
    }//GEN-LAST:event_btn_Sua_qlChatLieuActionPerformed

    private void btn_TrangThai_CLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_TrangThai_CLActionPerformed
        if (tblCLHetHan.getRowCount() == 0) {
            Messeger.alert(null, "Không Có Size Cần Chuyển");
            return;
        }
        int viTri = tblCLHetHan.getSelectedRow();
        if (viTri < 0) {
            Messeger.alert(null, " Vui Lòng Chọn Vào Chất Liệu Muốn Chuyển Trạng Thái");
            return;
        }

        try {
            dao_cl.update(new ChatLieu(Integer.parseInt(tblCLHetHan.getValueAt(viTri, 0).toString()), tblCLHetHan.getValueAt(viTri, 1).toString(), true));
            LoadDataToTableChatLieu();
            LoadDataToTableChatLieuHetHan();
            Messeger.alert(null, "Chuyển Trạng Thái Thành Công");
        } catch (Exception ex) {
            ex.printStackTrace();
            Messeger.showErrorDialog(null, ex.getMessage(), "Error");
        }
    }//GEN-LAST:event_btn_TrangThai_CLActionPerformed

    private void btn_Change_TableCLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Change_TableCLActionPerformed
        if (btn_Change_TableCL.getText().equalsIgnoreCase("Hết Hạn")) {
            card_ChatLieu.show(cardGocChatLieu, "card_phu");
            SetEnable(btn_Moi_qlChatLieu, btn_Sua_qlChatLieu, btn_Xoa_qlChatLieu, btn_Them_qlChatLieu, false);
            btn_Change_TableCL.setText("Trở Lại");
            btn_TrangThai_CL.setVisible(true);
        } else {
            card_ChatLieu.show(cardGocChatLieu, "card_goc");
            SetEnable(btn_Moi_qlChatLieu, btn_Sua_qlChatLieu, btn_Xoa_qlChatLieu, btn_Them_qlChatLieu, true);
            btn_Change_TableCL.setText("Hết Hạn");
            btn_TrangThai_CL.setVisible(false);
        }
    }//GEN-LAST:event_btn_Change_TableCLActionPerformed

    private void tblCLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCLMouseClicked
        int viTri = tblCL.getSelectedRow();
        if (viTri < 0) {
            return;
        }
        Settext(tblCL, txtCL_MaCL, txtCL_TenCL, viTri);
    }//GEN-LAST:event_tblCLMouseClicked

    private void btn_Moi_qlDVTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Moi_qlDVTActionPerformed
        this.ResetText(txtDVT_MaDVT, txtDVT_TenDVT);
    }//GEN-LAST:event_btn_Moi_qlDVTActionPerformed

    private void btn_Them_qlDVTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Them_qlDVTActionPerformed
        if (CheckLikeName(txtDVT_TenDVT, tblDVT, 1)) {
            return;
        }
        try {
            if (!Messeger.confirm(null, "Bạn có muốn thêm không?")) {
                return;
            }
            if (XValidate.isEmpty(txtDVT_TenDVT)) {
                Messeger.showErrorDialog(null, "Không để trống tên đơn vị tính", "Lỗi");
                return;
            }
            dao_dvt.insert(new DonViTinh(txtDVT_TenDVT.getText(), true));
            this.LoadDataToTableDVT();
            this.ResetText(txtDVT_MaDVT, txtDVT_TenDVT);
        } catch (Exception ex) {
            Messeger.showErrorDialog(null, "Lỗi thêm đơn vị tính", "Error!");
        }
    }//GEN-LAST:event_btn_Them_qlDVTActionPerformed

    private void btn_Xoa_qlDVTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Xoa_qlDVTActionPerformed
        try {
            if (!Messeger.confirm(null, "Bạn có muốn xóa không?")) {
                return;
            }
            if (XValidate.isEmpty(txtDVT_MaDVT)) {
                Messeger.showErrorDialog(null, "Không để trống mã đơn vị tính", "Lỗi");
                return;
            }
            if (!this.checkMa()) {
                Messeger.showErrorDialog(null, "Mã không tồn tại", "Error!");
                return;
            }
            dao_dvt.update(new DonViTinh(Integer.parseInt(txtDVT_MaDVT.getText()), txtDVT_TenDVT.getText(), false));
            this.LoadDataToTableDVTHetHan();
            this.LoadDataToTableDVT();
            ResetText(txtDVT_MaDVT, txtDVT_TenDVT);
        } catch (Exception ex) {
            Messeger.showErrorDialog(null, "Lỗi xóa đơn vị tính!", "Error!");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btn_Xoa_qlDVTActionPerformed

    private void btn_Sua_qlDVTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Sua_qlDVTActionPerformed
        try {
            if (tblDVT.getSelectedRow() == -1) {
                Messeger.alert(null, " Vui Lòng Chọn Trên table Để Sửa");
                return;
            }
            if (XValidate.isEmpty(txtDVT_TenDVT)) {
                Messeger.showErrorDialog(null, "Không để trống tên đơn vị tính", "Lỗi");
                return;
            }
            if (!this.checkMa()) {
                Messeger.showErrorDialog(null, "Mã không tồn tại", "Error!");
                return;
            }
            if (!Messeger.confirm(null, "Bạn có muốn sửa không?")) {
                return;
            }
            boolean trangThai = btn_Change_TableDVT.getText().trim().equalsIgnoreCase("Hết Hạn") ? true : false;
            dao_dvt.update(new DonViTinh(Integer.parseInt(txtDVT_MaDVT.getText()), txtDVT_TenDVT.getText(), trangThai));
            this.LoadDataToTableDVT();
            this.LoadDataToTableDVTHetHan();

        } catch (Exception ex) {
            Messeger.showErrorDialog(null, "Lỗi sửa đơn vị tính!", "Error!");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btn_Sua_qlDVTActionPerformed

    private void btn_TrangThai_DonViTinhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_TrangThai_DonViTinhActionPerformed
        if (tblDVTHetHan.getRowCount() == 0) {
            Messeger.alert(null, "Không Có Size Cần Chuyển");
            return;
        }
        int viTri = tblDVTHetHan.getSelectedRow();
        if (viTri < 0) {
            Messeger.alert(null, " Vui Lòng Chọn Vào Chất Liệu Muốn Chuyển Trạng Thái");
            return;
        }

        try {
            dao_dvt.update(new DonViTinh(Integer.parseInt(String.valueOf(tblDVTHetHan.getValueAt(viTri, 0))), String.valueOf(tblDVTHetHan.getValueAt(viTri, 1)), true));
            LoadDataToTableDVT();
            LoadDataToTableDVTHetHan();
            Messeger.alert(null, "Chuyển Trạng Thái Thành Công");
        } catch (Exception ex) {
            ex.printStackTrace();
            Messeger.showErrorDialog(null, ex.getMessage(), "Error");
        }
    }//GEN-LAST:event_btn_TrangThai_DonViTinhActionPerformed

    private void btn_Change_TableDVTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Change_TableDVTActionPerformed
        if (btn_Change_TableDVT.getText().trim().equalsIgnoreCase("Hết Hạn")) {
            btn_Change_TableDVT.setText("Trở Lại");
            card_DVT.show(cardGocDVT, "card_phu");
            SetEnable(btn_Moi_qlDVT, btn_Sua_qlDVT, btn_Xoa_qlDVT, btn_Them_qlDVT, false);
            btn_TrangThai_DonViTinh.setVisible(true);
        } else {
            SetEnable(btn_Moi_qlDVT, btn_Sua_qlDVT, btn_Xoa_qlDVT, btn_Them_qlDVT, true);
            btn_Change_TableDVT.setText("Hết Hạn");
            card_DVT.show(cardGocDVT, "card_goc");
            btn_TrangThai_DonViTinh.setVisible(false);
        }
    }//GEN-LAST:event_btn_Change_TableDVTActionPerformed

    private void tblDVTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDVTMouseClicked
        int viTri = tblDVT.getSelectedRow();
        if (viTri < 0) {
            return;
        }
        this.Settext(tblDVT, txtDVT_MaDVT, txtDVT_TenDVT, viTri);
    }//GEN-LAST:event_tblDVTMouseClicked

    private void tblDVTHetHanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDVTHetHanMouseClicked
        int viTri = tblDVTHetHan.getSelectedRow();
        if (viTri < 0) {
            return;
        }
        this.Settext(tblDVTHetHan, txtDVT_MaDVT, txtDVT_TenDVT, viTri);
    }//GEN-LAST:event_tblDVTHetHanMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ChatLieu;
    private javax.swing.JPanel DanhMuc;
    private javax.swing.JPanel DonViTinh;
    private javax.swing.JPanel MauSac;
    private javax.swing.JPanel Size;
    private javax.swing.JButton btn_Change_TableCL;
    private javax.swing.JButton btn_Change_TableDVT;
    private javax.swing.JButton btn_Change_TableMauSac;
    private javax.swing.JButton btn_Change_Table_Size;
    private javax.swing.JButton btn_Change_tblDanhMuc;
    private javax.swing.JButton btn_Moi_qlChatLieu;
    private javax.swing.JButton btn_Moi_qlDVT;
    private javax.swing.JButton btn_Moi_qlDanhMuc;
    private javax.swing.JButton btn_Moi_qlMauSac;
    private javax.swing.JButton btn_Moi_qlSize;
    private javax.swing.JButton btn_Sua_qlChatLieu;
    private javax.swing.JButton btn_Sua_qlDVT;
    private javax.swing.JButton btn_Sua_qlDanhMuc;
    private javax.swing.JButton btn_Sua_qlMauSac;
    private javax.swing.JButton btn_Sua_qlSize;
    private javax.swing.JButton btn_Them_qlChatLieu;
    private javax.swing.JButton btn_Them_qlDVT;
    private javax.swing.JButton btn_Them_qlDanhMuc;
    private javax.swing.JButton btn_Them_qlMauSac;
    private javax.swing.JButton btn_Them_qlSize;
    private javax.swing.JButton btn_TrangThai_CL;
    private javax.swing.JButton btn_TrangThai_DanhMuc;
    private javax.swing.JButton btn_TrangThai_DonViTinh;
    private javax.swing.JButton btn_TrangThai_MS;
    private javax.swing.JButton btn_TrangThai_Size;
    private javax.swing.JButton btn_Xoa_qlChatLieu;
    private javax.swing.JButton btn_Xoa_qlDVT;
    private javax.swing.JButton btn_Xoa_qlDanhMuc;
    private javax.swing.JButton btn_Xoa_qlMauSac;
    private javax.swing.JButton btn_Xoa_qlSize;
    private javax.swing.JPanel cardGocChatLieu;
    private javax.swing.JPanel cardGocDVT;
    private javax.swing.JPanel cardGocMauSac;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JPanel jpnDanhMuc;
    private javax.swing.JPanel jpnSanPham_cardGoc;
    private javax.swing.JTabbedPane pnlTabs;
    private javax.swing.JTable tblCL;
    private javax.swing.JTable tblCLHetHan;
    private javax.swing.JTable tblDVT;
    private javax.swing.JTable tblDVTHetHan;
    private javax.swing.JTable tblDanhMuc;
    private javax.swing.JTable tblDanhMucHetHan;
    private javax.swing.JTable tblMauSac;
    private javax.swing.JTable tblMauSacHetHan;
    private javax.swing.JTable tblSize;
    private javax.swing.JTable tblSize_HetHan;
    private javax.swing.JTextField txtCL_MaCL;
    private javax.swing.JTextField txtCL_TenCL;
    private javax.swing.JTextField txtDVT_MaDVT;
    private javax.swing.JTextField txtDVT_TenDVT;
    private javax.swing.JTextField txtDanhMuc_MaDM;
    private javax.swing.JTextField txtDanhMuc_NgayHomNay;
    private javax.swing.JTextField txtDanhMuc_NgayThem;
    private javax.swing.JTextField txtDanhMuc_TenDM;
    private javax.swing.JTextField txtMauSac_MaMau;
    private javax.swing.JTextField txtMauSac_TenMau;
    private javax.swing.JTextField txtSize_MaSize;
    private javax.swing.JTextField txtSize_TenSize;
    // End of variables declaration//GEN-END:variables

    private void init() {
        XInternal.uncorated(this);
        init_Size();
        init_DanhMuc();
        init_MauSac();
        init_ChatLieu();
        init_DVT();
        this.pnlTabs.setUI(new CustomTabbedPaneUI());
    }

    private void init_Size() {
        btn_TrangThai_Size.setVisible(false);
        dao_size = new SizeDao();
        modelTBL_Size = (DefaultTableModel) tblSize.getModel();
        modelTBL_SizeHetHan = (DefaultTableModel) tblSize_HetHan.getModel();
        LoadDataToTableSize();
        LoadDataToTableSizeHetHan();
        card_size = (CardLayout) jpnSanPham_cardGoc.getLayout();
        card_size.show(jpnSanPham_cardGoc, "card_goc");
    }

    private void init_DanhMuc() {
        txtDanhMuc_MaDM.setEditable(false);
        txtDanhMuc_NgayThem.setEditable(false);
        btn_TrangThai_DanhMuc.setVisible(false);
        String startDateString = java.time.LocalDate.now().toString();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd");
        try {
            txtDanhMuc_NgayHomNay.setText(sdf.format(sdf2.parse(startDateString)));
            txtDanhMuc_NgayHomNay.setEditable(false);
        } catch (ParseException ex) {
            ex.printStackTrace();
            Messeger.showErrorDialog(null, ex.getMessage(), "Error");
        }
        dao_dm = new DanhMucDao();
        modelTBL_DanhMuc = (DefaultTableModel) tblDanhMuc.getModel();
        modelTBL_DanhMucHetHan = (DefaultTableModel) tblDanhMucHetHan.getModel();
        LoadDataToTableDanhMuc();
        LoadDataToTableDanhMucHetHan();
        card_DanhMuc = (CardLayout) jpnDanhMuc.getLayout();
        card_DanhMuc.show(jpnDanhMuc, "card_goc");
    }

    private void init_MauSac() {
        txtMauSac_MaMau.setEditable(false);
        dao_ms = new MaMauDao();
        modelTBL_MauSac = (DefaultTableModel) tblMauSac.getModel();
        modelTBL_MauSacHetHan = (DefaultTableModel) tblMauSacHetHan.getModel();
        LoadDataToTableMauSac();
        LoadDataToTableMauSacHetHan();
        card_MauSac = (CardLayout) cardGocMauSac.getLayout();
        card_MauSac.show(cardGocMauSac, "card_goc");
    }

    private void init_ChatLieu() {
        txtCL_MaCL.setEditable(false);
        dao_cl = new ChatLieuDao();
        modelTBL_ChatLieu = (DefaultTableModel) tblCL.getModel();
        modelTBL_ChatLieuHetHan = (DefaultTableModel) tblCLHetHan.getModel();
        LoadDataToTableChatLieu();
        LoadDataToTableChatLieuHetHan();
        card_ChatLieu = (CardLayout) cardGocChatLieu.getLayout();
        card_ChatLieu.show(cardGocChatLieu, "card_goc");
        btn_TrangThai_CL.setVisible(false);

    }

    private void init_DVT() {
        txtDVT_MaDVT.setEditable(false);
        dao_dvt = new DonViTinhDao();
        modelTBL_DVT = (DefaultTableModel) tblDVT.getModel();
        modelTBL_DVTHetHan = (DefaultTableModel) tblDVTHetHan.getModel();
        this.LoadDataToTableDVT();
        this.LoadDataToTableDVTHetHan();
        card_DVT = (CardLayout) cardGocDVT.getLayout();
        card_DVT.show(cardGocDVT, "card_goc");
        btn_TrangThai_DonViTinh.setVisible(false);
    }

    private void ResetText(JTextField text, JTextField text1) {
        text.setText("");
        text1.setText("");
    }

    private void ResetText(JTextField text, JTextField text1, JTextField text2) {
        text.setText("");
        text1.setText("");
        text2.setText("");
    }

    private void LoadDataToTableSize() {
        try {
            modelTBL_Size.setRowCount(0);
            ArrayList<Size> list = dao_size.selectAll();
            for (int i = 0; i < list.size(); i++) {
                Size get = list.get(i);
                if (get.isTrangThai()) {
                    Object[] rowData = new Object[]{
                        get.getMaSize(),
                        get.getTenSize()
                    };
                    modelTBL_Size.addRow(rowData);
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void LoadDataToTableSizeHetHan() {
        try {
            modelTBL_SizeHetHan.setRowCount(0);
            ArrayList<Size> list = dao_size.selectAll();
            for (int i = 0; i < list.size(); i++) {
                Size get = list.get(i);
                if (!get.isTrangThai()) {
                    Object[] rowData = new Object[]{
                        get.getMaSize(),
                        get.getTenSize()
                    };
                    modelTBL_SizeHetHan.addRow(rowData);
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void Settext(JTable table, JTextField text, JTextField text1, int viTri) {
        text.setText(table.getValueAt(viTri, 0).toString());
        text1.setText(table.getValueAt(viTri, 1).toString());
    }

    private void Settext(JTable table, JTextField text, JTextField text1, JTextField text2, int viTri) {
        text.setText(table.getValueAt(viTri, 0).toString());
        text1.setText(table.getValueAt(viTri, 1).toString());
        text2.setText(table.getValueAt(viTri, 2).toString());
    }

    private void SetEnable(JButton btn1, JButton btn2, JButton btn3, JButton btn4, boolean boo) {
        btn1.setVisible(boo);
        btn2.setVisible(boo);
        btn3.setVisible(boo);
        btn4.setVisible(boo);
    }

    private void LoadDataToTableDanhMuc() {
        modelTBL_DanhMuc.setRowCount(0);
        try {
            ArrayList<DanhMuc> list = dao_dm.selectAll();
            for (int i = 0; i < list.size(); i++) {
                DanhMuc get = list.get(i);
                if (get.isTrangThai()) {
                    String ngayThem = XDate.toString(XDate.toDate(get.getNgayThem(), "yyyy-MM-dd"), "dd/MM/yyyy");
                    Object[] rowData = new Object[]{
                        get.getMaDM(),
                        get.getTenDanhMuc(),
                        ngayThem
                    };
                    modelTBL_DanhMuc.addRow(rowData);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            Messeger.showErrorDialog(null, ex.getMessage(), "Error");
        }
    }

    private void LoadDataToTableDanhMucHetHan() {
        modelTBL_DanhMucHetHan.setRowCount(0);
        try {
            ArrayList<DanhMuc> list = dao_dm.selectAll();
            for (int i = 0; i < list.size(); i++) {
                DanhMuc get = list.get(i);
                if (!get.isTrangThai()) {
                    String ngayThem = XDate.toString(XDate.toDate(get.getNgayThem(), "yyyy-MM-dd"), "dd/MM/yyyy");
                    Object[] rowData = new Object[]{
                        get.getMaDM(),
                        get.getTenDanhMuc(),
                        ngayThem
                    };
                    modelTBL_DanhMucHetHan.addRow(rowData);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            Messeger.showErrorDialog(null, ex.getMessage(), "Error");
        }
    }

    private void LoadDataToTableMauSac() {
        try {
            modelTBL_MauSac.setRowCount(0);
            ArrayList<MauSac> list = dao_ms.selectAll();
            for (int i = 0; i < list.size(); i++) {
                MauSac get = list.get(i);
                if (get.isTrangThai()) {
                    Object[] rowData = new Object[]{
                        get.getMaMau(),
                        get.getTenMau()
                    };
                    modelTBL_MauSac.addRow(rowData);
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void LoadDataToTableMauSacHetHan() {
        try {
            modelTBL_MauSacHetHan.setRowCount(0);
            ArrayList<MauSac> list = dao_ms.selectAll();
            for (int i = 0; i < list.size(); i++) {
                MauSac get = list.get(i);
                if (!get.isTrangThai()) {
                    Object[] rowData = new Object[]{
                        get.getMaMau(),
                        get.getTenMau()
                    };
                    modelTBL_MauSacHetHan.addRow(rowData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void LoadDataToTableChatLieu() {
        modelTBL_ChatLieu.setRowCount(0);
        try {
            ArrayList<ChatLieu> list = dao_cl.selectAll();
            for (int i = 0; i < list.size(); i++) {
                ChatLieu get = list.get(i);
                if (get.isTrangThai()) {
                    Object[] rowData = new Object[]{
                        get.getMaChatLieu(),
                        get.getTenChatLieu()
                    };
                    modelTBL_ChatLieu.addRow(rowData);
                }

            }
        } catch (Exception ex) {
            ex.printStackTrace();
            Messeger.showErrorDialog(null, ex.getMessage(), "Error");
        }
    }

    private void LoadDataToTableChatLieuHetHan() {
        modelTBL_ChatLieuHetHan.setRowCount(0);
        try {
            ArrayList<ChatLieu> list = dao_cl.selectAll();
            for (int i = 0; i < list.size(); i++) {
                ChatLieu get = list.get(i);
                if (!get.isTrangThai()) {
                    Object[] rowData = new Object[]{
                        get.getMaChatLieu(),
                        get.getTenChatLieu()
                    };
                    modelTBL_ChatLieuHetHan.addRow(rowData);
                }

            }
        } catch (Exception ex) {
            ex.printStackTrace();
            Messeger.showErrorDialog(null, ex.getMessage(), "Error");
        }
    }

    private void LoadDataToTableDVT() {
        try {
            modelTBL_DVT.setRowCount(0);
            ArrayList<DonViTinh> listDVT = dao_dvt.selectAll();
            for (int i = 0; i < listDVT.size(); i++) {
                DonViTinh get = listDVT.get(i);
                if (get.isTrangThai()) {
                    modelTBL_DVT.addRow(new Object[]{
                        get.getMaDVT(),
                        get.getTenDVT()
                    });
                }
            }
        } catch (Exception ex) {
            Messeger.showErrorDialog(null, "Lỗi load Data đơn vị tính!", "Error!");
        }
    }

    private void LoadDataToTableDVTHetHan() {
        try {
            modelTBL_DVTHetHan.setRowCount(0);
            ArrayList<DonViTinh> listDVT = dao_dvt.selectAll();
            for (int i = 0; i < listDVT.size(); i++) {
                DonViTinh get = listDVT.get(i);
                if (!get.isTrangThai()) {
                    modelTBL_DVTHetHan.addRow(new Object[]{
                        get.getMaDVT(),
                        get.getTenDVT()
                    });
                }
            }
        } catch (Exception ex) {
            Messeger.showErrorDialog(null, "Lỗi load Data đơn vị tính hết hạn!", "Error!");
            ex.printStackTrace();
        }
    }

    private boolean checkMa() {
        try {
            int ma = Integer.parseInt(txtDVT_MaDVT.getText());
            ArrayList<DonViTinh> list = dao_dvt.selectAll();
            for (DonViTinh dvt : list) {
                if (dvt.getMaDVT() == ma) {
                    return true;
                }
            }
            return false;
        } catch (Exception ex) {
            Messeger.showErrorDialog(null, "Lỗi chech mã", "Error!");
            ex.printStackTrace();
            return false;
        }
    }

    private boolean Validate_DanhMuc() {
        if (XValidate.isEmpty(txtDanhMuc_TenDM)) {
            Messeger.showErrorDialog(null, "Vui Lòng Nhập Tên Danh Mục", "lỗi");
            return false;
        }
        return true;
    }
    
    private boolean CheckLikeName(JTextField text , JTable table , int viTri){
        for (int i = 0; i < table.getRowCount(); i++) {
            if (text.getText().equalsIgnoreCase(table.getValueAt(i, viTri).toString())) {
            Messeger.alert(this, "Tên Trên Đã Tồn Tại");
            return true;
        }
        }
    return false;
    }

}
