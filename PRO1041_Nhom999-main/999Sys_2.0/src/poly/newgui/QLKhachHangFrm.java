/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package poly.newgui;

import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import poly.dao.KhachHangDao;
import poly.dao.LoaiKhachHangDao;
import poly.entity.KhachHang;
import poly.entity.LoaiKhachHang;
import poly.helper.Auth;
import poly.helper.CustomDatePicker;
import poly.helper.Messeger;
import poly.helper.RandomID;
import poly.helper.XDate;
import poly.helper.XExcel;
import poly.helper.XInternal;
import poly.helper.XValidate;

/**
 *
 * @author NTV
 */
public class QLKhachHangFrm extends javax.swing.JInternalFrame {

    DefaultTableModel khachHangModelTB = new DefaultTableModel();
    DefaultTableModel loaiKhachHangModelTB = new DefaultTableModel();
    DefaultComboBoxModel<LoaiKhachHang> loaiKhachHangComboBox = new DefaultComboBoxModel<>();

    KhachHangDao khachHangDao;
    LoaiKhachHangDao loaiKHDao;
    int row = -1;
    int rowLKH = -1;

    /**
     * Creates new form QLKhachHangFrm
     */
    public QLKhachHangFrm() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jpnChung = new javax.swing.JPanel();
        jpnTitle = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        jpnCenter = new javax.swing.JPanel();
        jpnKH = new javax.swing.JPanel();
        jpnTableKH = new javax.swing.JPanel();
        jpnKH_Search = new javax.swing.JPanel();
        jpnCBBLoaiKH = new javax.swing.JPanel();
        cbbLoaiKH = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        btnTrangThai = new javax.swing.JButton();
        jpnSearchKH = new javax.swing.JPanel();
        txtSearchByName = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        btnXuatExcel = new javax.swing.JButton();
        jpnTableKhachHang = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblKhachHang = new javax.swing.JTable();
        jpnLoaiBangKH = new javax.swing.JPanel();
        lblKHHoatDong = new javax.swing.JLabel();
        jpnFormKH = new javax.swing.JPanel();
        jpnFormKH_Btn = new javax.swing.JPanel();
        jpnNAUD = new javax.swing.JPanel();
        btnNew = new javax.swing.JButton();
        btnThemKH = new javax.swing.JButton();
        btnSuaKH = new javax.swing.JButton();
        btnXoaKH = new javax.swing.JButton();
        jpnFPNL = new javax.swing.JPanel();
        btnFirst = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        lblSoLuong = new javax.swing.JLabel();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        jpnFormTextField = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        txtMaKhachHang = new javax.swing.JTextField();
        lblMaKH = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        txtSDT = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        txtHoTen = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        dateTime = new com.github.lgooddatepicker.components.DatePicker();
        jPanel19 = new javax.swing.JPanel();
        txtDiaChi = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtNgTao = new com.github.lgooddatepicker.components.DatePicker();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jpnGioiTinh = new javax.swing.JPanel();
        rdoNam = new javax.swing.JRadioButton();
        rdoNu = new javax.swing.JRadioButton();
        jPanel16 = new javax.swing.JPanel();
        txtEmailKhachHang = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        txtSoDiemTich = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        txtDiemEXP = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jpnLoaiKH = new javax.swing.JPanel();
        jpnSeparator = new javax.swing.JPanel();
        jpnLoaiKHCenter = new javax.swing.JPanel();
        jpnTableLoaiKH = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblLoaiKH = new javax.swing.JTable();
        jpnTitleLoaiKhachHang = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jpnLoaiKhachHangCenter = new javax.swing.JPanel();
        jpnFormLoaiKhachHang = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        txtMaLoaiKH = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        txtTenLKH = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        rdoTonTaiLKH = new javax.swing.JRadioButton();
        rdoKhongTonTaiLKH = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        btnNewLKH = new javax.swing.JButton();
        btnThemLKH = new javax.swing.JButton();
        btnSuaLKH = new javax.swing.JButton();
        btnXoaLKH = new javax.swing.JButton();

        jpnChung.setPreferredSize(new java.awt.Dimension(1483, 666));
        jpnChung.setLayout(new java.awt.BorderLayout());

        jpnTitle.setBackground(new java.awt.Color(255, 102, 0));
        jpnTitle.setLayout(new java.awt.BorderLayout());

        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("QUẢN LÝ KHÁCH HÀNG");
        lblTitle.setBorder(javax.swing.BorderFactory.createMatteBorder(5, 1, 5, 1, new java.awt.Color(255, 102, 0)));
        lblTitle.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        lblTitle.setMinimumSize(new java.awt.Dimension(285, 45));
        lblTitle.setPreferredSize(new java.awt.Dimension(285, 55));
        jpnTitle.add(lblTitle, java.awt.BorderLayout.CENTER);

        jpnChung.add(jpnTitle, java.awt.BorderLayout.PAGE_START);

        jpnCenter.setLayout(new java.awt.BorderLayout());

        jpnKH.setLayout(new java.awt.BorderLayout());

        jpnTableKH.setPreferredSize(new java.awt.Dimension(825, 350));
        jpnTableKH.setLayout(new java.awt.BorderLayout());

        jpnKH_Search.setBackground(new java.awt.Color(0, 51, 255));
        jpnKH_Search.setMinimumSize(new java.awt.Dimension(198, 40));
        jpnKH_Search.setPreferredSize(new java.awt.Dimension(825, 40));
        jpnKH_Search.setLayout(new java.awt.BorderLayout());

        jpnCBBLoaiKH.setBackground(new java.awt.Color(204, 102, 255));
        jpnCBBLoaiKH.setMinimumSize(new java.awt.Dimension(30, 20));
        jpnCBBLoaiKH.setPreferredSize(new java.awt.Dimension(480, 20));
        jpnCBBLoaiKH.setLayout(new java.awt.BorderLayout());

        cbbLoaiKH.setBorder(null);
        cbbLoaiKH.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cbbLoaiKH.setPreferredSize(new java.awt.Dimension(145, 20));
        cbbLoaiKH.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbLoaiKHItemStateChanged(evt);
            }
        });
        jpnCBBLoaiKH.add(cbbLoaiKH, java.awt.BorderLayout.EAST);

        jLabel15.setText("  Loại Khách Hàng:");
        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel15.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel15.setPreferredSize(new java.awt.Dimension(155, 20));
        jpnCBBLoaiKH.add(jLabel15, java.awt.BorderLayout.LINE_START);

        btnTrangThai.setText("Tương Tác");
        btnTrangThai.setBackground(new java.awt.Color(255, 204, 0));
        btnTrangThai.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 0, new java.awt.Color(0, 0, 0)));
        btnTrangThai.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnTrangThai.setMaximumSize(new java.awt.Dimension(110, 15));
        btnTrangThai.setPreferredSize(new java.awt.Dimension(130, 15));
        btnTrangThai.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnTrangThaiMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnTrangThaiMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnTrangThaiMouseExited(evt);
            }
        });
        btnTrangThai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTrangThaiActionPerformed(evt);
            }
        });
        jpnCBBLoaiKH.add(btnTrangThai, java.awt.BorderLayout.CENTER);

        jpnKH_Search.add(jpnCBBLoaiKH, java.awt.BorderLayout.LINE_START);

        jpnSearchKH.setBackground(new java.awt.Color(255, 255, 255));
        jpnSearchKH.setLayout(new java.awt.BorderLayout());

        txtSearchByName.setBorder(javax.swing.BorderFactory.createMatteBorder(5, 5, 5, 5, new java.awt.Color(255, 255, 255)));
        txtSearchByName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchByNameKeyReleased(evt);
            }
        });
        jpnSearchKH.add(txtSearchByName, java.awt.BorderLayout.CENTER);

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/icons/search.jpg"))); // NOI18N
        btnSearch.setText("Sreach");
        btnSearch.setBackground(new java.awt.Color(255, 255, 255));
        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        jpnSearchKH.add(btnSearch, java.awt.BorderLayout.LINE_END);

        jpnKH_Search.add(jpnSearchKH, java.awt.BorderLayout.CENTER);

        jPanel9.setLayout(new java.awt.BorderLayout());

        btnXuatExcel.setText("Xuất Exel");
        btnXuatExcel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnXuatExcel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnXuatExcel.setPreferredSize(new java.awt.Dimension(130, 17));
        btnXuatExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatExcelActionPerformed(evt);
            }
        });
        jPanel9.add(btnXuatExcel, java.awt.BorderLayout.CENTER);

        jpnKH_Search.add(jPanel9, java.awt.BorderLayout.LINE_END);

        jpnTableKH.add(jpnKH_Search, java.awt.BorderLayout.PAGE_START);

        jpnTableKhachHang.setLayout(new java.awt.BorderLayout());

        tblKhachHang.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tblKhachHang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã KH", "Họ Tên", "Địa Chỉ", "Giới Tính", "Email", "SDT", "Ngày Sinh", "Ngày Tạo", "Tích Điểm", "Điểm EXP"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblKhachHang.setRowHeight(32);
        tblKhachHang.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblKhachHang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblKhachHangMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblKhachHang);
        if (tblKhachHang.getColumnModel().getColumnCount() > 0) {
            tblKhachHang.getColumnModel().getColumn(3).setPreferredWidth(40);
            tblKhachHang.getColumnModel().getColumn(8).setPreferredWidth(40);
            tblKhachHang.getColumnModel().getColumn(9).setPreferredWidth(40);
        }

        jpnTableKhachHang.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jpnLoaiBangKH.setBackground(new java.awt.Color(255, 255, 0));
        jpnLoaiBangKH.setPreferredSize(new java.awt.Dimension(877, 40));

        lblKHHoatDong.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblKHHoatDong.setText("Khách Hàng Tương Tác");
        lblKHHoatDong.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        lblKHHoatDong.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblKHHoatDong.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jpnLoaiBangKH.add(lblKHHoatDong);

        jpnTableKhachHang.add(jpnLoaiBangKH, java.awt.BorderLayout.PAGE_START);

        jpnTableKH.add(jpnTableKhachHang, java.awt.BorderLayout.CENTER);

        jpnKH.add(jpnTableKH, java.awt.BorderLayout.PAGE_START);

        jpnFormKH.setBackground(new java.awt.Color(102, 153, 255));
        jpnFormKH.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 5, 5, 5));
        jpnFormKH.setLayout(new java.awt.BorderLayout());

        jpnFormKH_Btn.setBackground(new java.awt.Color(102, 153, 255));
        jpnFormKH_Btn.setPreferredSize(new java.awt.Dimension(825, 50));
        jpnFormKH_Btn.setLayout(new java.awt.GridLayout(1, 2, 15, 0));

        jpnNAUD.setBackground(new java.awt.Color(102, 153, 255));
        jpnNAUD.setLayout(new java.awt.GridLayout(1, 4, 5, 0));

        btnNew.setText("Mới");
        btnNew.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        jpnNAUD.add(btnNew);

        btnThemKH.setText("Thêm");
        btnThemKH.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnThemKH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemKHActionPerformed(evt);
            }
        });
        jpnNAUD.add(btnThemKH);

        btnSuaKH.setText("Sửa");
        btnSuaKH.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnSuaKH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaKHActionPerformed(evt);
            }
        });
        jpnNAUD.add(btnSuaKH);

        btnXoaKH.setText("Xóa");
        btnXoaKH.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnXoaKH.setToolTipText("Xoa");
        btnXoaKH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaKHActionPerformed(evt);
            }
        });
        jpnNAUD.add(btnXoaKH);

        jpnFormKH_Btn.add(jpnNAUD);

        jpnFPNL.setBackground(new java.awt.Color(102, 153, 255));
        jpnFPNL.setLayout(new java.awt.GridLayout(1, 5, 5, 5));

        btnFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/icons/firtsicon.png"))); // NOI18N
        btnFirst.setBackground(new java.awt.Color(255, 255, 255));
        btnFirst.setToolTipText("");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });
        jpnFPNL.add(btnFirst);

        btnPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/icons/preicon.png"))); // NOI18N
        btnPrev.setBackground(new java.awt.Color(255, 255, 255));
        btnPrev.setToolTipText("Prevous");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });
        jpnFPNL.add(btnPrev);

        lblSoLuong.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblSoLuong.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSoLuong.setText("0 / N");
        jpnFPNL.add(lblSoLuong);

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/icons/nexticon.png"))); // NOI18N
        btnNext.setBackground(new java.awt.Color(255, 255, 255));
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        jpnFPNL.add(btnNext);

        btnLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/icons/lasticon.png"))); // NOI18N
        btnLast.setBackground(new java.awt.Color(255, 255, 255));
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });
        jpnFPNL.add(btnLast);

        jpnFormKH_Btn.add(jpnFPNL);

        jpnFormKH.add(jpnFormKH_Btn, java.awt.BorderLayout.PAGE_END);

        jpnFormTextField.setBackground(new java.awt.Color(102, 153, 255));
        jpnFormTextField.setLayout(new java.awt.GridLayout(5, 2, 15, 5));

        jPanel14.setLayout(new java.awt.BorderLayout());

        txtMaKhachHang.setEditable(false);
        txtMaKhachHang.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jPanel14.add(txtMaKhachHang, java.awt.BorderLayout.CENTER);

        lblMaKH.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblMaKH.setText("  Mã KH :");
        lblMaKH.setPreferredSize(new java.awt.Dimension(125, 15));
        jPanel14.add(lblMaKH, java.awt.BorderLayout.LINE_START);

        jpnFormTextField.add(jPanel14);

        jPanel13.setLayout(new java.awt.BorderLayout());

        txtSDT.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jPanel13.add(txtSDT, java.awt.BorderLayout.CENTER);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("  SDT : ");
        jLabel2.setPreferredSize(new java.awt.Dimension(125, 15));
        jPanel13.add(jLabel2, java.awt.BorderLayout.LINE_START);

        jpnFormTextField.add(jPanel13);

        jPanel21.setLayout(new java.awt.BorderLayout());

        txtHoTen.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jPanel21.add(txtHoTen, java.awt.BorderLayout.CENTER);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setText("  Họ Tên :");
        jLabel3.setPreferredSize(new java.awt.Dimension(125, 15));
        jPanel21.add(jLabel3, java.awt.BorderLayout.LINE_START);

        jpnFormTextField.add(jPanel21);

        jPanel20.setLayout(new java.awt.BorderLayout());

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setText("  Ngày Sinh : ");
        jLabel7.setPreferredSize(new java.awt.Dimension(125, 15));
        jPanel20.add(jLabel7, java.awt.BorderLayout.LINE_START);

        dateTime.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jPanel20.add(dateTime, java.awt.BorderLayout.CENTER);

        jpnFormTextField.add(jPanel20);

        jPanel19.setLayout(new java.awt.BorderLayout());

        txtDiaChi.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jPanel19.add(txtDiaChi, java.awt.BorderLayout.CENTER);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setText("  Địa Chỉ :");
        jLabel4.setPreferredSize(new java.awt.Dimension(125, 15));
        jPanel19.add(jLabel4, java.awt.BorderLayout.LINE_START);

        jpnFormTextField.add(jPanel19);

        jPanel18.setLayout(new java.awt.BorderLayout());

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText("  Ngày Tạo : ");
        jLabel8.setPreferredSize(new java.awt.Dimension(125, 15));
        jPanel18.add(jLabel8, java.awt.BorderLayout.LINE_START);

        txtNgTao.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jPanel18.add(txtNgTao, java.awt.BorderLayout.CENTER);

        jpnFormTextField.add(jPanel18);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel5.setText("  Giới Tính :");
        jLabel5.setPreferredSize(new java.awt.Dimension(125, 15));
        jPanel3.add(jLabel5, java.awt.BorderLayout.LINE_START);

        jpnGioiTinh.setLayout(new java.awt.BorderLayout());

        buttonGroup1.add(rdoNam);
        rdoNam.setSelected(true);
        rdoNam.setText("Nam");
        rdoNam.setBorder(null);
        rdoNam.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jpnGioiTinh.add(rdoNam, java.awt.BorderLayout.LINE_START);

        buttonGroup1.add(rdoNu);
        rdoNu.setText("Nữ");
        rdoNu.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1));
        rdoNu.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jpnGioiTinh.add(rdoNu, java.awt.BorderLayout.CENTER);

        jPanel3.add(jpnGioiTinh, java.awt.BorderLayout.CENTER);

        jpnFormTextField.add(jPanel3);

        jPanel16.setLayout(new java.awt.BorderLayout());

        txtEmailKhachHang.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jPanel16.add(txtEmailKhachHang, java.awt.BorderLayout.CENTER);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel6.setText("  Email :");
        jLabel6.setPreferredSize(new java.awt.Dimension(125, 15));
        jPanel16.add(jLabel6, java.awt.BorderLayout.LINE_START);

        jpnFormTextField.add(jPanel16);

        jPanel15.setLayout(new java.awt.BorderLayout());

        txtSoDiemTich.setEditable(false);
        txtSoDiemTich.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jPanel15.add(txtSoDiemTich, java.awt.BorderLayout.CENTER);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel10.setText("  Số Điểm : ");
        jLabel10.setPreferredSize(new java.awt.Dimension(125, 15));
        jPanel15.add(jLabel10, java.awt.BorderLayout.LINE_START);

        jpnFormTextField.add(jPanel15);

        jPanel1.setLayout(new java.awt.BorderLayout());

        txtDiemEXP.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jPanel1.add(txtDiemEXP, java.awt.BorderLayout.CENTER);

        jLabel9.setText("  Điểm EXP : ");
        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel9.setPreferredSize(new java.awt.Dimension(125, 15));
        jPanel1.add(jLabel9, java.awt.BorderLayout.LINE_START);

        jpnFormTextField.add(jPanel1);

        jpnFormKH.add(jpnFormTextField, java.awt.BorderLayout.CENTER);

        jpnKH.add(jpnFormKH, java.awt.BorderLayout.CENTER);

        jpnCenter.add(jpnKH, java.awt.BorderLayout.CENTER);

        jpnLoaiKH.setBackground(new java.awt.Color(102, 153, 255));
        jpnLoaiKH.setPreferredSize(new java.awt.Dimension(350, 708));
        jpnLoaiKH.setLayout(new java.awt.BorderLayout());

        jpnSeparator.setBackground(new java.awt.Color(0, 0, 0));
        jpnSeparator.setPreferredSize(new java.awt.Dimension(5, 639));

        javax.swing.GroupLayout jpnSeparatorLayout = new javax.swing.GroupLayout(jpnSeparator);
        jpnSeparator.setLayout(jpnSeparatorLayout);
        jpnSeparatorLayout.setHorizontalGroup(
            jpnSeparatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );
        jpnSeparatorLayout.setVerticalGroup(
            jpnSeparatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 569, Short.MAX_VALUE)
        );

        jpnLoaiKH.add(jpnSeparator, java.awt.BorderLayout.LINE_START);

        jpnLoaiKHCenter.setBackground(new java.awt.Color(102, 153, 255));
        jpnLoaiKHCenter.setLayout(new java.awt.BorderLayout());

        jpnTableLoaiKH.setPreferredSize(new java.awt.Dimension(400, 350));
        jpnTableLoaiKH.setLayout(new java.awt.BorderLayout());

        tblLoaiKH.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Mã Loại Khách Hàng", "Tên Loại Khách Hàng", "Trạng Thái"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblLoaiKH.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tblLoaiKH.setRowHeight(32);
        tblLoaiKH.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblLoaiKH.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLoaiKHMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblLoaiKH);

        jpnTableLoaiKH.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jpnTitleLoaiKhachHang.setPreferredSize(new java.awt.Dimension(345, 40));
        jpnTitleLoaiKhachHang.setLayout(new java.awt.BorderLayout());

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Loại Khách Hàng");
        jpnTitleLoaiKhachHang.add(jLabel11, java.awt.BorderLayout.CENTER);

        jpnTableLoaiKH.add(jpnTitleLoaiKhachHang, java.awt.BorderLayout.PAGE_START);

        jpnLoaiKHCenter.add(jpnTableLoaiKH, java.awt.BorderLayout.PAGE_START);

        jpnLoaiKhachHangCenter.setBackground(new java.awt.Color(102, 153, 255));
        jpnLoaiKhachHangCenter.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 5, 1, 5));
        jpnLoaiKhachHangCenter.setLayout(new java.awt.BorderLayout());

        jpnFormLoaiKhachHang.setBackground(new java.awt.Color(102, 153, 255));
        jpnFormLoaiKhachHang.setPreferredSize(new java.awt.Dimension(345, 150));
        jpnFormLoaiKhachHang.setLayout(new java.awt.GridLayout(3, 1, 5, 5));

        jPanel6.setLayout(new java.awt.BorderLayout());
        jPanel6.add(txtMaLoaiKH, java.awt.BorderLayout.CENTER);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel12.setText("  Mã Loại KH : ");
        jLabel12.setPreferredSize(new java.awt.Dimension(125, 14));
        jPanel6.add(jLabel12, java.awt.BorderLayout.LINE_START);

        jpnFormLoaiKhachHang.add(jPanel6);

        jPanel7.setLayout(new java.awt.BorderLayout());
        jPanel7.add(txtTenLKH, java.awt.BorderLayout.CENTER);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel13.setText("  Tên Loại KH : ");
        jLabel13.setPreferredSize(new java.awt.Dimension(125, 14));
        jPanel7.add(jLabel13, java.awt.BorderLayout.LINE_START);

        jpnFormLoaiKhachHang.add(jPanel7);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jLabel14.setText("  Trạng Thái");
        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel14.setPreferredSize(new java.awt.Dimension(125, 14));
        jPanel4.add(jLabel14, java.awt.BorderLayout.LINE_START);

        jPanel8.setLayout(new java.awt.BorderLayout());

        buttonGroup2.add(rdoTonTaiLKH);
        rdoTonTaiLKH.setSelected(true);
        rdoTonTaiLKH.setText("Tồn Tại");
        rdoTonTaiLKH.setBorder(null);
        rdoTonTaiLKH.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel8.add(rdoTonTaiLKH, java.awt.BorderLayout.LINE_START);

        buttonGroup2.add(rdoKhongTonTaiLKH);
        rdoKhongTonTaiLKH.setText("Không Tồn Tại");
        rdoKhongTonTaiLKH.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1));
        rdoKhongTonTaiLKH.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel8.add(rdoKhongTonTaiLKH, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel8, java.awt.BorderLayout.CENTER);

        jpnFormLoaiKhachHang.add(jPanel4);

        jpnLoaiKhachHangCenter.add(jpnFormLoaiKhachHang, java.awt.BorderLayout.PAGE_START);

        jPanel2.setBackground(new java.awt.Color(102, 153, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 1, 1, 1));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel5.setBackground(new java.awt.Color(102, 153, 255));
        jPanel5.setPreferredSize(new java.awt.Dimension(343, 40));
        jPanel5.setLayout(new java.awt.GridLayout(1, 4, 5, 5));

        btnNewLKH.setText("Mới");
        btnNewLKH.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnNewLKH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewLKHActionPerformed(evt);
            }
        });
        jPanel5.add(btnNewLKH);

        btnThemLKH.setText("Thêm");
        btnThemLKH.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnThemLKH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemLKHActionPerformed(evt);
            }
        });
        jPanel5.add(btnThemLKH);

        btnSuaLKH.setText("Sửa");
        btnSuaLKH.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnSuaLKH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaLKHActionPerformed(evt);
            }
        });
        jPanel5.add(btnSuaLKH);

        btnXoaLKH.setText("Xóa");
        btnXoaLKH.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnXoaLKH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaLKHActionPerformed(evt);
            }
        });
        jPanel5.add(btnXoaLKH);

        jPanel2.add(jPanel5, java.awt.BorderLayout.PAGE_START);

        jpnLoaiKhachHangCenter.add(jPanel2, java.awt.BorderLayout.CENTER);

        jpnLoaiKHCenter.add(jpnLoaiKhachHangCenter, java.awt.BorderLayout.CENTER);

        jpnLoaiKH.add(jpnLoaiKHCenter, java.awt.BorderLayout.CENTER);

        jpnCenter.add(jpnLoaiKH, java.awt.BorderLayout.LINE_END);

        jpnChung.add(jpnCenter, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpnChung, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbbLoaiKHItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbLoaiKHItemStateChanged
        if (cbbLoaiKH.getItemCount() > 0) {
            if (lblKHHoatDong.getText().equalsIgnoreCase("Khách Hàng Tương Tác")) {
                this.fillToTableKhachHang(1);
            } else if (lblKHHoatDong.getText().equalsIgnoreCase("Khách Hàng Không Tương Tác")) {
                this.fillToTableKhachHang(0);
            }
        }
        this.clearFormKH();
    }//GEN-LAST:event_cbbLoaiKHItemStateChanged

    private void btnTrangThaiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTrangThaiMouseClicked
    }//GEN-LAST:event_btnTrangThaiMouseClicked

    private void btnTrangThaiMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTrangThaiMouseEntered
        //   changeColorTitleLoaiKH("Enter");
        btnTrangThai.setBackground(Color.BLUE);
        if (btnTrangThai.getText().equalsIgnoreCase("Tương Tác")) {
            btnTrangThai.setText("Không Tương Tác");

        } else {
            btnTrangThai.setText("Tương Tác");
        }
    }//GEN-LAST:event_btnTrangThaiMouseEntered

    private void btnTrangThaiMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTrangThaiMouseExited
        //changeColorTitleLoaiKH("Exit");
        btnTrangThai.setBackground(Color.YELLOW);
        if (lblKHHoatDong.getText().trim().equalsIgnoreCase("Khách Hàng Tương Tác")) {
            btnTrangThai.setText("Tương Tác");
        } else if (lblKHHoatDong.getText().trim().equalsIgnoreCase("Khách Hàng Không Tương Tác")) {
            btnTrangThai.setText("Không Tương Tác");
        }
    }//GEN-LAST:event_btnTrangThaiMouseExited

    private void btnTrangThaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTrangThaiActionPerformed
        this.setFormKhachHang(new KhachHang());
        if (btnTrangThai.getText().equalsIgnoreCase("Tương Tác")) {
            this.fillToTableKhachHang(1);
            jpnLoaiBangKH.setBackground(Color.BLUE);
            lblKHHoatDong.setText("Khách Hàng Tương Tác");
        } else if (btnTrangThai.getText().equalsIgnoreCase("Không Tương Tác")) {
            this.fillToTableKhachHang(0);
            jpnLoaiBangKH.setBackground(Color.YELLOW);
            lblKHHoatDong.setText("Khách Hàng Không Tương Tác");
        }
        this.changeTxtButton();
    }//GEN-LAST:event_btnTrangThaiActionPerformed

    private void txtSearchByNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchByNameKeyReleased
        try {
            String maKH = this.txtSearchByName.getText();
            LoaiKhachHang lKH = (LoaiKhachHang) cbbLoaiKH.getSelectedItem();
            int maLoaiKH = lKH.getMaLoaiKH();
            String hoTen = this.txtSearchByName.getText();
            String diaChi = this.txtSearchByName.getText();
            List<Object[]> listSearchKH = khachHangDao.getThongTinKhachHang("%" + maKH + "%", maLoaiKH, "%" + hoTen + "%", "%" + diaChi + "%");
            khachHangModelTB.setRowCount(0);
            for (Object[] KH : listSearchKH) {
                String GT = Boolean.parseBoolean(String.valueOf(KH[3])) ? "Nam" : "Nữ";
                khachHangModelTB.addRow(new Object[]{KH[0], KH[1], KH[2], GT, KH[4], KH[5], KH[6], KH[7], KH[8], KH[9]});
            }
        } catch (Exception ex) {
            Messeger.showErrorDialog(this, "Lỗi tìm kiếm", "Error!");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_txtSearchByNameKeyReleased

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
            String maKH = this.txtSearchByName.getText();
            LoaiKhachHang lKH = (LoaiKhachHang) cbbLoaiKH.getSelectedItem();
            int maLoaiKH = lKH.getMaLoaiKH();
            String hoTen = this.txtSearchByName.getText();
            String diaChi = this.txtSearchByName.getText();
            List<Object[]> listSearchKH = khachHangDao.getThongTinKhachHang("%" + maKH + "%", maLoaiKH, "%" + hoTen + "%", "%" + diaChi + "%");
            khachHangModelTB.setRowCount(0);
            for (Object[] KH : listSearchKH) {
                String GT = Boolean.parseBoolean(String.valueOf(KH[3])) ? "Nam" : "Nữ";
                khachHangModelTB.addRow(new Object[]{KH[0], KH[1], KH[2], GT, KH[4], KH[5], KH[6], KH[7], KH[8]});
            }
        } catch (Exception ex) {
            Messeger.showErrorDialog(this, "Lỗi tìm kiếm", "Error!");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnXuatExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatExcelActionPerformed
        try {
            File file = XExcel.xuatExcel(this.tblKhachHang, "KhachHang" + XDate.toString(new Date(), "ddMMyyyyhhmmss"));
            if (file == null) {
                return;
            }
            Messeger.alert(this, "Xuất file Excel thành công!");

        } catch (Exception ex) {
            Messeger.showErrorDialog(this, "Lỗi xuất file Excel !", "Error!");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnXuatExcelActionPerformed

    private void tblKhachHangMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblKhachHangMouseClicked
        row = this.tblKhachHang.getSelectedRow();
        if (row == -1) {
            return;
        }
        this.changeIndex(row);
        this.edit();
    }//GEN-LAST:event_tblKhachHangMouseClicked

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        this.clearFormKH();
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnThemKHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemKHActionPerformed
        if (this.checkFormKhachHang()) {
            return;
        }
        this.txtMaKhachHang.setText(RandomID.randomIDKhachHang(txtHoTen.getText().trim()));
        if (this.checkMaKH()) {
            Messeger.showErrorDialog(this, "Mã khách hàng đã tồn tại!", "Error!");
            return;
        }
        try {
            KhachHang kH = this.getFormKhachHang();
            khachHangDao.insert(kH);
            Messeger.alert(this, "Thêm khách hàng mới thành công!");
            this.fillToTableKhachHang(1);
            this.clearFormKH();
        } catch (Exception ex) {
            Messeger.showErrorDialog(this, "Thêm khách hàng thất bại!", "Error!");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnThemKHActionPerformed

    private void btnSuaKHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaKHActionPerformed
        if (this.checkFormKhachHang()) {
            return;
        }
        try {
            if (!this.checkMaKH()) {
                Messeger.showErrorDialog(this, "Mã khách hàng chưa tồn tại!", "Error!");
                return;
            }
            KhachHang kH = this.getFormKhachHang();
            khachHangDao.update(kH);
            Messeger.alert(this, "Update khách hàng thành công!");
            this.fillToTableKhachHang(1);
            if (this.btnTrangThai.getText().equalsIgnoreCase("Không Tương Tác")) {
                this.btnTrangThai.setText("Tương Tác");
                jpnLoaiBangKH.setBackground(Color.red);
                lblKHHoatDong.setText("Khách Hàng Tương Tác");
            }
            this.changeTxtButton();
        } catch (Exception ex) {
            Messeger.showErrorDialog(this, "Lỗi update khách hàng!", "Error!");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnSuaKHActionPerformed

    private void btnXoaKHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaKHActionPerformed
//        if (!Auth.isManager()) {
//            Messeger.showErrorDialog(this, "Bạn không có quyền xóa!", "Error!");
//            return;
//        }
        row = this.tblKhachHang.getSelectedRow();
        if (this.txtMaKhachHang.getText().isEmpty()) {
            this.txtMaKhachHang.setBackground(Color.YELLOW);
            Messeger.showErrorDialog(this, "Chọn vị trí bạn muốn xóa/ hãy nhập mã muốn xóa", "Error!");
            return;
        } else {
            this.txtMaKhachHang.setBackground(Color.WHITE);
        }
        if (!Messeger.confirm(this, "Bạn có chắc muốn xóa khách hàng này?")) {
            return;
        }

        try {
            if (!this.checkMaKH()) {
                Messeger.showErrorDialog(this, "Mã khách hàng chưa tồn tại!", "Error!");
                return;
            }
            KhachHang kH = this.getFormKhachHang();
            khachHangDao.delete(kH.getMaKH());
            Messeger.alert(this, "Xóa thành công!");
            if (this.btnTrangThai.getText().equalsIgnoreCase("Tương Tác")) {
                this.btnTrangThai.setText("Không Tương Tác");
                jpnLoaiBangKH.setBackground(Color.BLUE);
                lblKHHoatDong.setText("Khách Hàng Không Tương Tác");
            }
            this.changeTxtButton();
            this.fillToTableKhachHang(0);
            this.clearFormKH();
        } catch (Exception ex) {
            Messeger.showErrorDialog(this, "Lỗi xóa khách hàng!", "Error!");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnXoaKHActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        try {
            row = 0;
            String maKH = tblKhachHang.getValueAt(row, 0).toString();
            KhachHang kH = khachHangDao.selectById(maKH);
            this.setFormKhachHang(kH);
            this.changeIndex(row);
        } catch (Exception ex) {
            Messeger.showErrorDialog(this, "Lỗi truy vấn khách hàng đầu tiên!", "Error!");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        try {
            if (this.row <= 0) {
                this.row = tblKhachHang.getRowCount();
            }
            this.row--;
            String maKH = tblKhachHang.getValueAt(row, 0).toString();
            KhachHang kH = khachHangDao.selectById(maKH);
            this.setFormKhachHang(kH);
            this.changeIndex(row);
        } catch (Exception ex) {
            Messeger.showErrorDialog(this, "Lỗi truy vấn khách hàng trước!", "Error!");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        try {
            if (this.row >= tblKhachHang.getRowCount() - 1) {
                this.row = -1;
            }
            this.row++;
            String maKH = tblKhachHang.getValueAt(row, 0).toString();
            KhachHang kH = khachHangDao.selectById(maKH);
            this.setFormKhachHang(kH);
            this.changeIndex(row);
        } catch (Exception ex) {
            Messeger.showErrorDialog(this, "Lỗi truy vấn khách hàng tiếp theo!", "Error!");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        try {
            this.row = tblKhachHang.getRowCount() - 1;
            String maKH = tblKhachHang.getValueAt(row, 0).toString();
            KhachHang kH = khachHangDao.selectById(maKH);
            this.setFormKhachHang(kH);
            this.changeIndex(row);
        } catch (Exception ex) {
            Messeger.showErrorDialog(this, "Lỗi truy vấn khách hàng cuối cùng!", "Error!");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnLastActionPerformed

    private void tblLoaiKHMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLoaiKHMouseClicked
        rowLKH = tblLoaiKH.getSelectedRow();
        if (rowLKH == -1) {
            return;
        }

        this.showDetailLoaiKH();
    }//GEN-LAST:event_tblLoaiKHMouseClicked

    private void btnNewLKHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewLKHActionPerformed
        this.clearFormLoaiKH();
    }//GEN-LAST:event_btnNewLKHActionPerformed

    private void btnThemLKHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemLKHActionPerformed
        if (!Auth.isManager()) {
            Messeger.showErrorDialog(this, "Bạn không có quyền thêm mới!", "Error!");
            return;
        }
        if (XValidate.isEmpty(this.txtTenLKH)) {
            Messeger.showErrorDialog(this, "Không để trống tên loại khách hàng !", "Error!");
            return;
        }
        try {
            if (this.checkMaLoaiKH()) {
                Messeger.showErrorDialog(this, "Mã loại khách hàng đã tồn tại!", "Error!");
                return;
            }
            LoaiKhachHang lKH = this.getFormLoaiKH();
            loaiKHDao.insert(lKH);
            Messeger.alert(this, "Thêm mới loại khách hàng thành công!");
            this.fillToTableLoaiKhachHang();
            this.fillToComBoBox();
        } catch (Exception ex) {
            Messeger.showErrorDialog(this, "Lỗi thêm mới loại khách hàng!", "Error!");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnThemLKHActionPerformed

    private void btnSuaLKHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaLKHActionPerformed
        if (!Auth.isManager()) {
            Messeger.showErrorDialog(this, "Bạn không có quyền thêm mới!", "Error!");
            return;
        }
        if (XValidate.isEmpty(this.txtMaLoaiKH)) {
            Messeger.showErrorDialog(this, "Không để trống mã loại khách hàng !", "Error!");
            return;
        }
        if (XValidate.isEmpty(this.txtTenLKH)) {
            Messeger.showErrorDialog(this, "Không để trống tên loại khách hàng !", "Error!");
            return;
        }
        try {
            if (!Messeger.confirm(this, "Bạn có chắc muốn sửa không?")) {
                return;
            }

            if (!this.checkMaLoaiKH()) {
                Messeger.showErrorDialog(this, "Mã loại khách hàng chưa tồn tại!", "Error!");
                return;
            }

            LoaiKhachHang lKH = this.getFormLoaiKH();
            loaiKHDao.update(lKH);
            Messeger.alert(this, "Update loại khách hàng thành công!");
            this.fillToComBoBox();
            this.fillToTableLoaiKhachHang();
            if (cbbLoaiKH.getItemCount() == 0) {
                khachHangModelTB.setRowCount(0);
            }
        } catch (Exception ex) {
            Messeger.showErrorDialog(this, "Lỗi updatte loại khách hàng!", "Error!");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnSuaLKHActionPerformed

    private void btnXoaLKHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaLKHActionPerformed
        if (!Auth.isManager()) {
            Messeger.showErrorDialog(this, "Bạn không có quyền thêm mới!", "Error!");
            return;
        }
        if (XValidate.isEmpty(this.txtMaLoaiKH)) {
            Messeger.showErrorDialog(this, "Không để trống mã loại khách hàng !", "Error!");
            return;
        }
        try {
            if (!Messeger.confirm(this, "Bạn có chắc muốn xóa không?")) {
                return;
            }
            if (!this.checkMaLoaiKH()) {
                Messeger.showErrorDialog(this, "Mã loại khách hàng chưa tồn tại!", "Error!");
                return;
            }

            String maLKH = txtMaLoaiKH.getText();
            loaiKHDao.delete(maLKH);
            Messeger.alert(this, "Xóa loại khách hàng thành công!");
            this.fillToComBoBox();
            this.fillToTableLoaiKhachHang();
            if (cbbLoaiKH.getItemCount() == 0) {
                khachHangModelTB.setRowCount(0);
            }
        } catch (Exception ex) {
            Messeger.showErrorDialog(this, "Lỗi xóa loại khách hàng!", "Error!");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnXoaLKHActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnNewLKH;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSuaKH;
    private javax.swing.JButton btnSuaLKH;
    private javax.swing.JButton btnThemKH;
    private javax.swing.JButton btnThemLKH;
    private javax.swing.JButton btnTrangThai;
    private javax.swing.JButton btnXoaKH;
    private javax.swing.JButton btnXoaLKH;
    private javax.swing.JButton btnXuatExcel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox<String> cbbLoaiKH;
    private com.github.lgooddatepicker.components.DatePicker dateTime;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel jpnCBBLoaiKH;
    private javax.swing.JPanel jpnCenter;
    private javax.swing.JPanel jpnChung;
    private javax.swing.JPanel jpnFPNL;
    private javax.swing.JPanel jpnFormKH;
    private javax.swing.JPanel jpnFormKH_Btn;
    private javax.swing.JPanel jpnFormLoaiKhachHang;
    private javax.swing.JPanel jpnFormTextField;
    private javax.swing.JPanel jpnGioiTinh;
    private javax.swing.JPanel jpnKH;
    private javax.swing.JPanel jpnKH_Search;
    private javax.swing.JPanel jpnLoaiBangKH;
    private javax.swing.JPanel jpnLoaiKH;
    private javax.swing.JPanel jpnLoaiKHCenter;
    private javax.swing.JPanel jpnLoaiKhachHangCenter;
    private javax.swing.JPanel jpnNAUD;
    private javax.swing.JPanel jpnSearchKH;
    private javax.swing.JPanel jpnSeparator;
    private javax.swing.JPanel jpnTableKH;
    private javax.swing.JPanel jpnTableKhachHang;
    private javax.swing.JPanel jpnTableLoaiKH;
    private javax.swing.JPanel jpnTitle;
    private javax.swing.JPanel jpnTitleLoaiKhachHang;
    private javax.swing.JLabel lblKHHoatDong;
    private javax.swing.JLabel lblMaKH;
    private javax.swing.JLabel lblSoLuong;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JRadioButton rdoKhongTonTaiLKH;
    private javax.swing.JRadioButton rdoNam;
    private javax.swing.JRadioButton rdoNu;
    private javax.swing.JRadioButton rdoTonTaiLKH;
    private javax.swing.JTable tblKhachHang;
    private javax.swing.JTable tblLoaiKH;
    private javax.swing.JTextField txtDiaChi;
    private javax.swing.JTextField txtDiemEXP;
    private javax.swing.JTextField txtEmailKhachHang;
    private javax.swing.JTextField txtHoTen;
    private javax.swing.JTextField txtMaKhachHang;
    private javax.swing.JTextField txtMaLoaiKH;
    private com.github.lgooddatepicker.components.DatePicker txtNgTao;
    private javax.swing.JTextField txtSDT;
    private javax.swing.JTextField txtSearchByName;
    private javax.swing.JTextField txtSoDiemTich;
    private javax.swing.JTextField txtTenLKH;
    // End of variables declaration//GEN-END:variables

    private void init() {
        XInternal.uncorated(this);
        khachHangModelTB = (DefaultTableModel) tblKhachHang.getModel();
        loaiKhachHangModelTB = (DefaultTableModel) tblLoaiKH.getModel();
        loaiKhachHangComboBox = (DefaultComboBoxModel) this.cbbLoaiKH.getModel();
        dateTime.setSettings(CustomDatePicker.customsDatePicker(dateTime, new javax.swing.ImageIcon(getClass().getResource("/poly/icons/calendar.png"))));
        txtNgTao.setSettings(CustomDatePicker.customsDatePicker(txtNgTao, new javax.swing.ImageIcon(getClass().getResource("/poly/icons/calendar.png"))));
        dateTime.setFont(new java.awt.Font("Tahoma", 1, 16));
        txtNgTao.setFont(new java.awt.Font("Tahoma", 1, 16));
        khachHangDao = new KhachHangDao();
        loaiKHDao = new LoaiKhachHangDao();
        this.fillToComBoBox();
        this.fillToTableLoaiKhachHang();
        if (tblKhachHang.getRowCount() > 0) {
            tblKhachHang.setRowSelectionInterval(row, row);
        }
    }

    private void fillToComBoBox() {
        try {
            loaiKhachHangComboBox.removeAllElements();
            ArrayList<LoaiKhachHang> listLoaiKH = loaiKHDao.selectAll();
            for (LoaiKhachHang lKH : listLoaiKH) {
                if (lKH.isTrangThai() == true) {
                    loaiKhachHangComboBox.addElement(lKH);
                }
            }
        } catch (Exception ex) {
            Messeger.showErrorDialog(this, "Lỗi load Data loại khách hàng!", "Error!");
            ex.printStackTrace();
        }
    }

    private void fillToTableKhachHang(int trangThaiKH) {
        try {
            khachHangModelTB.setRowCount(0);
            if (cbbLoaiKH.getItemCount() > 0) {
                LoaiKhachHang lKH = (LoaiKhachHang) cbbLoaiKH.getSelectedItem();
                KhachHang kH = new KhachHang();
                kH.setHoTen("");
                kH.setMaLoaiKH(lKH.getMaLoaiKH());

                ArrayList<KhachHang> listKH = khachHangDao.selectWhere(kH);
                for (KhachHang khachHang : listKH) {
                    // 1 tương tác
                    if (trangThaiKH == 1) {
                        if (khachHang.isTrangThai()) {
                            khachHangModelTB.addRow(new Object[]{
                                khachHang.getMaKH(),
                                khachHang.getHoTen(),
                                khachHang.getDiaChi(),
                                khachHang.isGioiTinh() ? "Nam" : "Nữ",
                                khachHang.getEmail(),
                                khachHang.getSDT(),
                                XDate.toString(khachHang.getNgaySinh(), "dd/MM/yyyy"),
                                XDate.toString(khachHang.getNgayTao(), "dd/MM/yyyy"),
                                khachHang.getTichDiem(),
                                khachHang.getDiemEXP()

                            });
                        }
                    } else if (trangThaiKH == 0) {  // 0 khách hàng k tương tác
                        if (!khachHang.isTrangThai()) {
                            khachHangModelTB.addRow(new Object[]{
                                khachHang.getMaKH(),
                                khachHang.getHoTen(),
                                khachHang.getDiaChi(),
                                khachHang.isGioiTinh() ? "Nam" : "Nữ",
                                khachHang.getEmail(),
                                khachHang.getSDT(),
                                XDate.toString(khachHang.getNgaySinh(), "dd/MM/yyyy"),
                                XDate.toString(khachHang.getNgayTao(), "dd/MM/yyyy"),
                                khachHang.getTichDiem(),
                                khachHang.getDiemEXP()});
                        }
                    }
                }

                this.row = 0;
                // this.setFormKhachHang(listKH.get(0));
                this.changeIndex(row);
            }
        } catch (Exception ex) {
            Messeger.showErrorDialog(this, "Lỗi load Data Khách Hàng !", "Error!");
            ex.printStackTrace();
        }
    }

    private void setFormKhachHang(KhachHang kH) {

        this.txtMaKhachHang.setText(kH.getMaKH());
        this.txtHoTen.setText(kH.getHoTen());
        this.txtDiaChi.setText(kH.getDiaChi());
        if (kH.isGioiTinh()) {
            rdoNam.setSelected(true);
        } else {
            rdoNu.setSelected(true);
        }
        this.txtEmailKhachHang.setText(kH.getEmail());
        this.txtSDT.setText(kH.getSDT());
        if (kH.getNgaySinh() == null) {
            this.dateTime.setDateToToday();
        } else {
            this.dateTime.setText(XDate.toString(kH.getNgaySinh(), "dd/MM/yyyy"));
        }
        if (kH.getNgayTao() == null) {
            this.txtNgTao.setText(XDate.toString(new Date(), "dd/MM/yyyy"));
        } else {
            this.txtNgTao.setText(XDate.toString(kH.getNgayTao(), "dd/MM/yyyy"));
        }
        this.txtSoDiemTich.setText(kH.getTichDiem() + "");
        this.txtDiemEXP.setText(kH.getDiemEXP() + "");
        if (tblKhachHang.getRowCount() > 0) {
            tblKhachHang.setRowSelectionInterval(row, row);
        }
    }

    private KhachHang getFormKhachHang() {
        KhachHang kH = new KhachHang();
        LoaiKhachHang loaiKH = (LoaiKhachHang) cbbLoaiKH.getSelectedItem();
        kH.setMaKH(txtMaKhachHang.getText());
        kH.setMaLoaiKH(loaiKH.getMaLoaiKH());
        kH.setHoTen(txtHoTen.getText());
        kH.setNgaySinh(XDate.toDate(dateTime.getText(), "dd/MM/yyyy"));
        kH.setGioiTinh(rdoNam.isSelected() ? true : false);
        kH.setEmail(txtEmailKhachHang.getText());
        kH.setSDT(txtSDT.getText());
        kH.setDiaChi(txtDiaChi.getText());
        kH.setNgayTao(XDate.toDate(txtNgTao.getText(), "dd/MM/yyyy"));
        kH.setTrangThai(true);
        return kH;
    }

    public void changeColorTitleLoaiKH(String s) {
//        if (s.equalsIgnoreCase("Exit")) {
//            jpnLoaiBangKH.setBackground(Color.YELLOW);
//            lblLoaiKH.setForeground(Color.RED);
//            lblLoaiKH.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 0, 0)));
//        } else if (s.equalsIgnoreCase("Enter")) {
//            jpnLoaiBangKH.setBackground(Color.red);
//            lblLoaiKH.setForeground(Color.YELLOW);
//            lblLoaiKH.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 204, 0)));
//        }
    }

    private void clearFormKH() {
        KhachHang kH = new KhachHang();
        this.setFormKhachHang(kH);
        this.txtMaKhachHang.setBackground(Color.WHITE);
        this.txtHoTen.setBackground(Color.WHITE);
        this.txtDiaChi.setBackground(Color.WHITE);
        this.txtEmailKhachHang.setBackground(Color.WHITE);
        this.txtSDT.setBackground(Color.WHITE);
    }

    private boolean checkMaKH() {
        try {
            String maKH = txtMaKhachHang.getText();
            ArrayList<KhachHang> listKH = khachHangDao.selectAll();
            for (KhachHang kH : listKH) {
                if (kH.getMaKH().equalsIgnoreCase(maKH)) {
                    return true;
                }
            }
            return false;
        } catch (Exception ex) {
            Messeger.showErrorDialog(this, "Lỗi check mã khách hàng!", "Error!");
            ex.printStackTrace();
            return false;
        }

    }

    private void edit() {
        try {
            String maKH = (String) this.tblKhachHang.getValueAt(this.row, 0);
            KhachHang kH = khachHangDao.selectById(maKH);
            this.setFormKhachHang(kH);
        } catch (Exception ex) {
            Messeger.showErrorDialog(this, "Lỗi tìm truy vấn theo mã khách hàng!", "Error!");
            ex.printStackTrace();
        }
    }

    private void fillToTableLoaiKhachHang() {
        try {
            loaiKhachHangModelTB.setRowCount(0);
            ArrayList<LoaiKhachHang> listLoaiKH = loaiKHDao.selectAll();
            for (LoaiKhachHang loaiKH : listLoaiKH) {
                loaiKhachHangModelTB.addRow(new Object[]{
                    loaiKH.getMaLoaiKH(),
                    loaiKH.getTenLoaiKH(),
                    loaiKH.isTrangThai() ? "Tồn Tại" : "Không Tài Tại",});
            }
        } catch (Exception ex) {
            Messeger.showErrorDialog(this, "Lỗi load data loại khách hàng !", "Error!");
            ex.printStackTrace();
        }
    }

    private void clearFormLoaiKH() {
        txtMaLoaiKH.setText("");
        txtTenLKH.setText("");
        rdoTonTaiLKH.setSelected(true);
        txtMaLoaiKH.setBackground(Color.WHITE);
        txtTenLKH.setBackground(Color.WHITE);
    }

    private void showDetailLoaiKH() {
        txtMaLoaiKH.setText(tblLoaiKH.getValueAt(rowLKH, 0).toString());
        txtTenLKH.setText(tblLoaiKH.getValueAt(rowLKH, 1).toString());
        if (tblLoaiKH.getValueAt(rowLKH, 2).toString().equalsIgnoreCase("Tồn Tại")) {
            this.rdoTonTaiLKH.setSelected(true);
        } else {
            this.rdoKhongTonTaiLKH.setSelected(true);
        }
        tblLoaiKH.setRowSelectionInterval(rowLKH, rowLKH);
    }

    private boolean checkMaLoaiKH() {
        int maLKH = Integer.parseInt(this.txtMaLoaiKH.getText());
        try {
            ArrayList<LoaiKhachHang> listLoaiKH = loaiKHDao.selectAll();
            for (LoaiKhachHang lKH : listLoaiKH) {
                if (lKH.getMaLoaiKH() == maLKH) {
                    return true;
                }
            }
            return false;
        } catch (Exception ex) {
            Messeger.showErrorDialog(this, "Lỗi truy vấn check data loại khách hàng", "Error!");
            ex.printStackTrace();
            return false;
        }
    }

    private LoaiKhachHang getFormLoaiKH() {
        LoaiKhachHang lKH = new LoaiKhachHang();
        lKH.setMaLoaiKH(Integer.parseInt(this.txtMaLoaiKH.getText()));
        lKH.setTenLoaiKH(this.txtTenLKH.getText());
        lKH.setTrangThai(rdoTonTaiLKH.isSelected() ? true : false);
        return lKH;
    }

    private boolean checkFormKhachHang() {
        StringBuilder sb = new StringBuilder();
//        if (XValidate.isEmpty(txtMaKhachHang)) {
//            sb.append("Không để trống mã khách hàng!\n");
//        }
        if (XValidate.isEmpty(txtHoTen)) {
            sb.append("Không để trống họ tên!\n");
        }
        if (XValidate.isEmpty(txtDiaChi)) {
            sb.append("Không để trống địa chỉ!\n");
        }
        if (XValidate.isEmpty(txtSDT)) {
            sb.append("Không để trống SDT!\n");
        }

        if (XValidate.isEmpty(txtEmailKhachHang)) {
            sb.append("Không để trống Email!\n");
        }
        // if(XValidate.isNotEmail(txtDiaChi))
        if (sb.length() > 0) {
            Messeger.showErrorDialog(this, sb.toString(), "Error!");
            return true;
        } else {
            return false;
        }
    }

    private void changeIndex(int row) {

        if (tblKhachHang.getRowCount() > 0) {
            this.lblSoLuong.setText(row + 1 + " / " + tblKhachHang.getRowCount());
        }
    }

    private void changeTxtButton() {
        if (lblKHHoatDong.getText().equalsIgnoreCase("Khách Hàng Không Tương Tác")) {
            btnXoaKH.setEnabled(false);
            btnThemKH.setEnabled(false);
            btnNew.setEnabled(false);
        } else {
            btnXoaKH.setEnabled(true);
            btnThemKH.setEnabled(true);
            btnNew.setEnabled(true);
        }
    }
}
