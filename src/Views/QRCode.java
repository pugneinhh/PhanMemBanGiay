/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Views;

import DomainModels.ChiTietSanPham;
import DomainModels.HoaDon;
import DomainModels.HoaDonChiTiet;
import Services.ChiTietSanPhamService;
import Services.HoaDonChiTieservice;
import Services.hoadonservice;
import ViewModels.ChiTietSanPhamModel;
import ViewModels.HoaDonViewModel;
import ViewModels.hoadonchitietviewmodel;
import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import responsitories.ChiTietSanPhamResponsitory;

/**
 *
 * @author Phanh
 */
public class QRCode extends javax.swing.JFrame implements Runnable, ThreadFactory {

   private WebcamPanel panel = null;
    private Webcam webcam = null;
    private static final long serialVersionUID = 6441489157408381878L;
    private Executor executor = Executors.newSingleThreadExecutor(this);
    public static ChiTietSanPham ctsp = null;
    HoaDonChiTieservice hoaDonChiTieservice = new HoaDonChiTieservice();
    ChiTietSanPhamResponsitory ctspr = new ChiTietSanPhamResponsitory();
    JTable tblGioHang;
    JTable tblHoaDon;
    BanHangJPanel banHangfr;
    private final hoadonservice hoaDonService;
    private final ChiTietSanPhamService chiTietSanPhamService;
    public QRCode(JTable tblGioHang, JTable tblHoaDon, BanHangJPanel banhangfr) {
        initComponents();
        initWebcam();
        this.setLocationRelativeTo(null);
        ctsp = new ChiTietSanPham();
        this.tblGioHang = tblGioHang;
        this.tblHoaDon = tblHoaDon;
        this.banHangfr = banhangfr;
        chiTietSanPhamService = new ChiTietSanPhamService();
        hoaDonService = new hoadonservice();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtKQ = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(txtKQ, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 330, 510, 30));

        jSeparator1.setForeground(new java.awt.Color(11, 230, 238));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 360, 510, 10));

        jLabel1.setText("Result");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, -1, -1));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(230, 230, 230)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 490, 290));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 510, 370));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QRCode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(() -> {
//            new QRCode().setVisible(true);
//        });
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(() -> {
//            new QRCode().setVisible(true);
//        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField txtKQ;
    // End of variables declaration//GEN-END:variables

    private void initWebcam() {
        //Tạo một đối tượng Dimension để lấy kích thước

        //của độ phân giải VGA qua hàm getSize() của lớp
        //WebcamResolution.
        Dimension size = WebcamResolution.VGA.getSize();
        webcam = Webcam.getWebcams().get(0);//0 is default webcam
        webcam.setViewSize(size);
//Set kích thước hiển thị của webcam theo đối tượng

        //Dimension vừa tạo
        panel = new WebcamPanel(webcam);//Khởi tạo thuộc tính webcamPanel với tham số
        //là thuộc tính webcam

        //Set kích thước của panel bằng với kích thước
        //hiển thị của webcam
        panel.setPreferredSize(size);
        //Set thuộc tính FPSDisplayed của panel thành true

        //để hiển thị số khung hình lên
        panel.setFPSDisplayed(true);
        //Thêm webcamPanel vào showPanel mà chúng ta đã tạo

        //lúc đầu và set vị trị của webcamPanel thông qua
        //hàm khởi tạo của Absolute Layout
        jPanel2.add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 490, 290));
        executor.execute(this);
    }

    @Override
    public void run() {
        do {
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            Result result = null;
            BufferedImage image = null;
            if (webcam.isOpen()) {
                if ((image = webcam.getImage()) == null) {
                    continue;
                }
            }
            LuminanceSource source = new BufferedImageLuminanceSource(image);
            BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));

            try {
                result = new MultiFormatReader().decode(bitmap);
            } catch (NotFoundException e) {
                //no result
            }
            ChiTietSanPham c = new ChiTietSanPham();
            if (result != null) {
                txtKQ.setText(result.getText());
                ArrayList<ChiTietSanPhamModel> listCTSP = chiTietSanPhamService.getAllChiTietSanPham();
                ArrayList<HoaDonViewModel> listHD = hoaDonService.getAllhoadon();
                HoaDon h = new HoaDon();
                ArrayList<HoaDonChiTiet> listHDCT = hoaDonChiTieservice.getAllhoadon();
                ArrayList<HoaDonChiTiet> listHDCTNew = new ArrayList<>();
                hoadonchitietviewmodel hdct = new hoadonchitietviewmodel();
                ctsp = ctspr.getChiTietSanPhamByMaQR(Integer.valueOf(result.getText())); // lấy ra gì đây

                if (ctsp != null & ctsp.getMaQR() != 0) {
                    JOptionPane.showMessageDialog(this, "Đã tìm thấy sản phẩm " + ctsp.getIdSP().getTenSP() + ", size " + ctsp.getIdSize().getTenSize() + ", màu " + ctsp.getIdMS().getTenMS() + ", cao " + ctsp.getIdDC().getTenDC() + "\n Bạn có muốn thêm sản phẩm này vào giỏ hàng không?");
                    int SLTon = ctsp.getSoLuong();

                    for (ChiTietSanPhamModel cm : listCTSP) {
                        if (cm.getIdCTSP() != null && cm.getIdCTSP().equals(ctsp.getIdCTSP())) {
                            SLTon = cm.getSoLuong();
                        }
                    }
                    int indexHD = tblHoaDon.getSelectedRow();
                    String maHD = tblHoaDon.getValueAt(indexHD, 0).toString();

                    for (HoaDonViewModel x : listHD) {
                        if (x.getMaHD() != null && x.getMaHD().equals(maHD)) {
                            h.setIdHD(x.getIdHD());
                        }
                    }
                    
                    hdct.setIdHD(h);
                    hdct.setIdCTSP(ctsp);
                    hdct.setSoLuong(1);
                    hdct.setDonGia(ctsp.getGiaBan());
                    System.out.println(hdct.getIdCTSP()+"sanpham quet");
                    System.out.println(hdct);
                    for (HoaDonChiTiet y : listHDCT) {
                        if (y.getIdHD().getIdHD() != null && y.getIdHD().getIdHD().equals(h.getIdHD())) {
                            listHDCTNew.add(y);
                        }
                    }
                    int dem = 0;
                    for (HoaDonChiTiet y1 : listHDCTNew) {

                        if (y1.getIdCTSP().getIdCTSP().equals(ctsp.getIdCTSP())) {
                            if (y1.getSoLuong() == SLTon || ((y1.getSoLuong()) + 1) > SLTon) {
                                JOptionPane.showMessageDialog(this, "Không thể vượt quá số lượng đang có");
                                return;
                            }
                            hdct.setSoLuong(y1.getSoLuong() + 1);
                            hoaDonChiTieservice.updateHDCT(hdct);
                            banHangfr.loadGioHangbyID(h.getIdHD());
                            dem++;
//                banHangfr.loadTableBanHang();
                        }

                    }
                    if (dem == 0) {
                        hdct.setSoLuong(1);
                        hoaDonChiTieservice.inserthdct(hdct);
                        banHangfr.loadGioHangbyID(h.getIdHD());
                    }

                }
            }
            

        } while (true);
        
    }

    @Override
    public Thread newThread(Runnable r) {
        Thread t = new Thread(r, "My Thread");
        t.setDaemon(true);// biến một user thread thành daemon thread (setDaemon(true))
        return t;
    }
}
